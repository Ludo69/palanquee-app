<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <h1 class="text-3xl font-bold mb-4 text-center text-white">Param√®tres</h1>
    <link rel="stylesheet" href="/styles.css">
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <!-- Bouton de retour en haut √† gauche -->
    <button onclick="window.history.back()" class="absolute top-4 left-4 text-white hover:text-gray-300 text-2xl">
        ‚Üê
    </button>
    <!-- Bouton Retour -->
    <!--<button onclick="retour()" class="fixed top-4 left-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-blue-600 transition duration-300">
        Retour
    </button>-->
    <div class="container">
        <!-- Ic√¥ne WhatsApp -->
    <a href="javascript:void(0);" class="btn-whatsapp" onclick="envoyerParWhatsApp()">
        <img src="https://upload.wikimedia.org/wikipedia/commons/5/5e/WhatsApp_icon.png" alt="Partager sur WhatsApp">
    </a>

    <!-- Ic√¥ne PDF -->
    <button onclick="sendWhatsApp()" class="btn-pdf">
        <img src="\icons\iconPDF.png" alt="PDF Icon" class="icon-pdf" />
    </button>


    <% if (palanquees && palanquees.length > 0) { %>
        <% 
            // Trier les palanqu√©es par ordre alphab√©tique des noms des animaux marins
            palanquees.sort(function(a, b) {
                return a.nom.localeCompare(b.nom);
            });
        %>
        <% palanquees.forEach(function(palanquee) { %>
            <div class="palanquee-container flex flex-col gap-2">
                <!-- üü¢ Partie Informations (Nom centr√© + Plongeurs en ligne) -->
                <div class="palanquee-info text-center">
                    <h2 class="palanquee-nom text-lg font-bold"><%= palanquee.nom %></h2>
                    <p><strong>Plongeurs :</strong> 
                        <% if (palanquee.plongeurs && palanquee.plongeurs.length > 0) { 
                            palanquee.plongeurs.sort(function(a, b) {
                                const aEstBleu = !["N1", "N2", "N3"].includes(a.niveau_plongeur_historique);
                                const bEstBleu = !["N1", "N2", "N3"].includes(b.niveau_plongeur_historique);
                                return aEstBleu === bEstBleu ? 0 : aEstBleu ? -1 : 1;
                            });
                            palanquee.plongeurs.forEach(function(plongeur, index) { 
                                let couleurClasse = (["N1", "N2", "N3"].includes(plongeur.niveau_plongeur_historique)) ? "text-green-500" : "text-blue-500"; 
                        %>
                            <span class="<%= couleurClasse %> font-semibold">
                                <%= plongeur.nom %> - <%= plongeur.niveau_plongeur_historique ? plongeur.niveau_plongeur_historique : "N/A" %>
                            </span>
                            <% if (index < palanquee.plongeurs.length - 1) { %> | <% } %>
                        <% }); } else { %>
                            <span class="text-gray-500 italic">Aucun plongeur</span>
                        <% } %>
                    </p>
                </div>
            
                <!-- üü¶ Les deux blocs align√©s c√¥te √† c√¥te -->
                <div class="palanquee-blocs flex gap-2">
                    <!-- üîµ Bloc "Consignes DP" -->
                    <div class="bloc-consignes bg-blue-300 text-gray-900 p-3 rounded-lg w-1/2 flex flex-col justify-between">
                        <p class="font-bold text-center mb-2">Consignes DP</p>
                        <form id="consignes-form-<%= palanquee.id %>" class="grid grid-cols-2 gap-x-2 gap-y-1 items-center">
                            <input type="hidden" name="palanquee_id" value="<%= palanquee.id %>">
                            
                            <label class="text-sm text-right">Prof :</label>
                            <input type="number" name="prof_max" class="prof-max w-full p-1 text-sm rounded"
                                value="<%= palanquee.prof_max || '' %>"
                                <%= palanquee.prof_max ? 'disabled' : '' %> required inputmode="numeric">

                            <label class="text-sm text-right">Dur√©e :</label>
                            <input type="number" name="duree_max" class="duree-max w-full p-1 text-sm rounded"
                                value="<%= palanquee.duree_max || '' %>"
                                <%= palanquee.duree_max ? 'disabled' : '' %> required inputmode="numeric">
                        </form>
                        
                        <!-- ‚úÖ D√©sactiver le bouton si les champs existent -->
                        <div class="flex justify-center">
                            <button type="submit" class="btn-enregistrer-consignes text-sm p-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition mt-2"
                                data-form-id="consignes-form-<%= palanquee.id %>"
                                <%= (palanquee.prof_max && palanquee.duree_max) ? 'disabled="disabled"' : '' %>
                                onclick="desactiverChamps('<%= palanquee.id %>')">
                                Enregistrer
                            </button>
                        </div>
                    </div>
            
                    <!-- üî¥ Partie "R√©alis√©" -->
                    <div class="bloc-formulaire bg-teal-500 text-gray-900 p-3 rounded-lg w-1/2 flex flex-col justify-between">
                        <p class="font-bold text-center mb-2">R√©alis√©s</p>
                        <form id="form-<%= palanquee.id %>" class="palanquee-form grid grid-cols-2 gap-x-2 gap-y-1 items-center">
                            <input type="hidden" name="palanquee_id" value="<%= palanquee.id %>">
                            
                            <label class="text-sm text-right">Prof :</label>
                            <input type="number" name="profondeur" class="profondeur w-full p-1 text-sm rounded" value="<%= palanquee.profondeur || '' %>" 
                                <%= palanquee.profondeur ? 'disabled' : '' %> required inputmode="numeric">
            
                            <label class="text-sm text-right">Dur√©e :</label>
                            <input type="number" name="duree" class="duree w-full p-1 text-sm rounded" value="<%= palanquee.duree || '' %>" 
                                <%= palanquee.duree ? 'disabled' : '' %> required inputmode="numeric">                
            
                            <label class="text-sm text-right">Paliers :</label>
                            <input type="text" name="paliers" class="paliers w-full p-1 text-sm rounded" value="<%= palanquee.paliers || '' %>" 
                                <%= palanquee.paliers ? 'disabled' : '' %> required>
            
                            <!-- ‚úÖ Checkbox align√©e -->
                            <div class="col-span-2 flex items-center gap-2">
                                <input type="checkbox" id="paliers-<%= palanquee.id %>-checkbox" class="paliers-checkbox">
                                <label for="paliers-<%= palanquee.id %>-checkbox" class="text-sm">3min / 3m S√©cu</label>
                            </div>
                        </form>
                        <!-- ‚úÖ Bouton Enregistrer align√© -->
                        <div class="flex justify-center">
                            <button type="submit" class="btn-enregistrer text-sm p-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition mt-2" data-form-id="form-<%= palanquee.id %>"
                                <%= (palanquee.duree && palanquee.profondeur && palanquee.paliers) ? 'disabled' : '' %>>
                                Enregistrer
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        <% }); %>
    <% } else { %>
        <p>Aucune palanqu√©e disponible pour cette plong√©e.</p>
    <% } %>

        <!-- Bottom Navigation -->
        <div class="fixed bottom-0 left-0 w-full bg-gray-800 bg-opacity-80 backdrop-blur-md shadow-lg flex justify-around py-3 rounded-t-2xl">
            <a href="/" class="text-gray-400 hover:text-blue-400 flex flex-col items-center">
                <i class="fas fa-home text-xl"></i>
                <span class="text-xs">üè† Accueil</span>
            </a>
            <a href="/gestion-plongeurs" class="text-gray-400 hover:text-green-400 flex flex-col items-center">
                <i class="fas fa-users text-xl"></i>
                <span class="text-xs">üë§ Plongeurs</span>
            </a>
            <a href="/gestion-sorties" class="text-gray-400 hover:text-yellow-400 flex flex-col items-center">
                <i class="far fa-calendar-alt text-xl"></i>
                <span class="text-xs">ü§ø Sorties</span>
            </a>
            <a href="/selection-sorties" class="text-gray-400 hover:text-orange-400 flex flex-col items-center">
                <i class="fas fa-mask text-xl"></i>
                <span class="text-xs">üìã Palanqu√©es</span>
            </a>
        </div>

    
    <script>
    // Fonction pour revenir √† l'√©cran pr√©c√©dent
    function retour() {
        history.back(); // Revenir √† la page pr√©c√©dente
    }

    const urlParams = new URLSearchParams(window.location.search);
    const plongeeId = urlParams.get("id"); // R√©cup√®re l'ID de la plong√©e depuis l'URL
    console.log("üîç ID de la plong√©e r√©cup√©r√© :", plongeeId);

    document.querySelectorAll(".btn-enregistrer").forEach(button => {
    button.addEventListener("click", async function (event) {
        event.preventDefault(); // Emp√™che le rechargement de la page
        this.disabled = true; // D√©sactive imm√©diatement le bouton pour √©viter un double clic

        // Trouver le formulaire en utilisant data-form-id
        const form = document.querySelector(`#${this.getAttribute("data-form-id")}`);
        if (!form) {
            console.error("‚ùå Erreur : Le formulaire sp√©cifi√© par data-form-id n'a pas √©t√© trouv√©.");
            alert("‚ùå Impossible d'enregistrer : formulaire non trouv√©.");
            this.disabled = false;
            return;
        }

        // R√©cup√©rer l'ID de la palanqu√©e √† partir de l'input name="palanquee_id"
        const palanqueeIdInput = form.querySelector("[name='palanquee_id']");
        if (!palanqueeIdInput) {
            console.error("‚ùå Erreur : Champ palanquee_id introuvable dans le formulaire.");
            alert("‚ùå Impossible d'enregistrer : ID de la palanqu√©e introuvable.");
            this.disabled = false;
            return;
        }

        const palanqueeId = palanqueeIdInput.value;
        console.log("‚úÖ ID de la palanqu√©e r√©cup√©r√© :", palanqueeId);

        if (!palanqueeId) {
            console.error("‚ùå Erreur : ID de palanqu√©e manquant !");
            alert("‚ùå Impossible d'enregistrer : ID de la palanqu√©e manquant.");
            this.disabled = false;
            return;
        }

        // V√©rifier si le formulaire existe
        const formElement = document.querySelector(`#form-${palanqueeId}`);
        console.log("Formulaire trouv√© :", formElement);

        if (!formElement) {
            console.error(`‚ùå Erreur : Formulaire pour la palanqu√©e ${palanqueeId} introuvable !`);
            alert(`‚ùå Erreur interne : formulaire #form-${palanqueeId} non trouv√©.`);
            this.disabled = false;
            return;
        }

        // R√©cup√©ration s√©curis√©e des champs
        const dureeInput = formElement.querySelector(".duree");
        const profondeurInput = formElement.querySelector(".profondeur");
        const paliersInput = formElement.querySelector(".paliers");

        if (!dureeInput || !profondeurInput || !paliersInput) {
            console.error("‚ùå Erreur : Un ou plusieurs champs sont introuvables !");
            alert("‚ùå Erreur interne : champs de saisie non trouv√©s.");
            this.disabled = false;
            return;
        }

        const duree = dureeInput.value;
        const profondeur = profondeurInput.value;
        const paliers = paliersInput.value;

        try {
            const response = await fetch("/sauvegarder_parametres", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ id: palanqueeId, duree, profondeur, paliers })
            });

            if (!response.ok) throw new Error("Erreur serveur");

            const result = await response.json();
            if (result.success) {
                alert("‚úÖ Param√®tres enregistr√©s avec succ√®s !");
                dureeInput.disabled = true;
                profondeurInput.disabled = true;
                paliersInput.disabled = true;
            } else {
                alert("‚ùå Erreur lors de l'enregistrement.");
                this.disabled = false;
            }
        } catch (error) {
            console.error("üö® Erreur lors de la requ√™te ::", error);
            alert("‚ùå Erreur de communication avec le serveur.");
            this.disabled = false;
        }
    });
});



// Initialisation de la valeur "Aucun" dans le champ paliers au chargement de la page
document.querySelectorAll(".palanquee-form").forEach(form => {
    const paliersInput = form.querySelector(".paliers");
    if (paliersInput && !paliersInput.value) {
        paliersInput.value = 'Aucun'; // Valeur par d√©faut "Aucun" au chargement de la page
    }
});


// Gestion de la case √† cocher pour les paliers
document.querySelectorAll(".paliers-checkbox").forEach(checkbox => {
    checkbox.addEventListener("change", function() {
        // Extrait l'ID sans les pr√©fixes et suffixes
        const palanqueeId = this.id.replace("paliers-", "").replace("-checkbox", "");
        console.log("‚úÖ ID extrait :", palanqueeId);

        // Recherche le formulaire avec cet ID
        const form = document.querySelector(`#form-${palanqueeId}`);
        if (!form) {
            console.error(`‚ùå ERREUR : Aucun formulaire trouv√© avec l'ID #form-${palanqueeId}`);
            return;
        }

        // Recherche le champ .paliers dans le formulaire
        const paliersInput = form.querySelector(".paliers");
        if (!paliersInput) {
            console.error(`‚ùå ERREUR : Aucun champ paliers trouv√© dans #form-${palanqueeId}`);
            return;
        }

        // Si la case "3m / 3m S√©cu" est coch√©e, mettre la valeur dans le champ
        if (this.checked) {
            // Si le champ est vide ou a la valeur "Aucun", mettre "3m / 3m S√©cu"
            if (paliersInput.value === '' || paliersInput.value === 'Aucun') {
                paliersInput.value = '3min / 3m S√©cu';
                console.log("‚úÖ Valeur du champ 'Paliers' mise √† jour √† : 3min / 3m S√©cu");
            }
        } else {
            // Si la case est d√©coch√©e, v√©rifier si une autre case est coch√©e
            const anyChecked = form.querySelectorAll(".paliers-checkbox:checked").length > 0;

            // Si aucune autre case n'est coch√©e, remettre "Aucun"
            if (!anyChecked) {
                paliersInput.value = 'Aucun';
                console.log("‚úÖ Valeur du champ 'Paliers' mise √† jour √† : Aucun");
            }
        }
    });
});

document.querySelectorAll(".btn-enregistrer-consignes").forEach(button => {
        button.addEventListener("click", async function () {
            const form = this.closest('.bloc-consignes').querySelector('form');
            const palanqueeId = form.querySelector('input[name="palanquee_id"]').value;
            const profMax = form.querySelector('.prof-max').value;
            const dureeMax = form.querySelector('.duree-max').value;

            if (!profMax || !dureeMax) {
                alert("Veuillez remplir tous les champs !");
                return;
            }

            try {
                const response = await fetch('/enregistrer-consignes', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ palanquee_id: palanqueeId, prof_max: profMax, duree_max: dureeMax })
                });

                const result = await response.json();
                if (result.success) {
                    alert("Consignes DP enregistr√©es !");
                } else {
                    alert("Erreur : " + result.error);
                }
            } catch (error) {
                console.error("Erreur lors de l'enregistrement :", error);
                alert("Une erreur est survenue !");
            }
        });
    });

    function desactiverChamps(palanqueeId) {
        // R√©cup√©rer le formulaire correspondant
        const form = document.getElementById(`consignes-form-${palanqueeId}`);
        
        if (!form) return; // S√©curit√© si le formulaire n'existe pas

        // R√©cup√©rer les champs Prof et Dur√©e
        const profInput = form.querySelector("input[name='prof_max']");
        const dureeInput = form.querySelector("input[name='duree_max']");
        
        // V√©rifier que les deux champs sont bien remplis
        if (profInput.value.trim() !== "" && dureeInput.value.trim() !== "") {
            // D√©sactiver les champs
            profInput.disabled = true;
            dureeInput.disabled = true;

            // D√©sactiver le bouton d'enregistrement
            const bouton = document.querySelector(`[data-form-id="consignes-form-${palanqueeId}"]`);
            if (bouton) {
                bouton.disabled = true;
            }
        }
    }


    async function envoyerParWhatsApp() {
        const plongeeId = "<%= typeof plongeeId !== 'undefined' ? plongeeId : '' %>";

        try {
            const response = await fetch(`/plongee_info?id=${plongeeId}`);
            const data = await response.json();

            if (data.error) {
                alert("Erreur : " + data.error);
                return;
            }

            // Afficher l'objet complet sous forme de cha√Æne format√©e
            console.log("üìÖ Data (avec JSON.stringify) :", JSON.stringify(data, null, 2));

            // Afficher l'objet sous forme de tableau
            console.table(data);

            let datePlongee = data.date;
            if (!datePlongee || datePlongee.toLowerCase().includes("invalid")) {
                console.error("‚ùå Erreur : Date invalide ->", data.date);
                datePlongee = "Date inconnue";
            }

            let nomSitePlongee = data.site || "Site inconnu";
            let nomDuDP = data.nomdp || "DP non trouv√©";
            let niveauDuDP = data.niveaudp || "Niveau non trouv√©";
            console.log("DP et niveau : " + nomSitePlongee + ", " + nomDuDP + ", " + niveauDuDP);

            let message = `üåä *Compte-rendu Plong√©e* üåä\n`;
            message += `üë®‚Äçüíº *Directeur de plong√©e* - ${nomDuDP} (${niveauDuDP})\n`;  // Ajout du niveau ici
            message += `üìÖ *Date* : ${datePlongee}\n`;
            message += `ü§ø *Plong√©e n¬∞1 - ${nomSitePlongee}*\n\n`;

            <% palanquees.forEach(function(palanquee) { %>
                    // üîµ Ajout des Consignes DP
                message += `üîπ *Palanqu√©e <%= palanquee.nom %>*\n`;
                //message += `üìã *Consignes DP* :\n`;
                //message += `üìè *Profondeur max* : <%= palanquee.prof_max || 'Non d√©fini' %> m\n`;
                //message += `‚è≥ *Dur√©e max* : <%= palanquee.duree_max || 'Non d√©fini' %> min\n`;
                //message += `üìã *R√©alis√©s* :\n`;
                message += `üìè *Profondeur* : <%= palanquee.profondeur || 'Non d√©fini' %> m\n`;
                message += `‚è≥ *Dur√©e* : <%= palanquee.duree || 'Non d√©fini' %> min\n`;
                message += `‚öì *Paliers* : <%= palanquee.paliers || 'Non d√©finis' %>\n`;
                message += `üë• *Plongeurs* :\n`;

                <% if (palanquee.plongeurs && palanquee.plongeurs.length > 0) { %>
                    <% palanquee.plongeurs.forEach(function(plongeur) { %>
                        message += `   - <%= plongeur.nom %> (<%= plongeur.niveau_plongeur_historique %>)\n`;
                    <% }); %>
                <% } else { %>
                    message += `   Aucun plongeur dans cette palanqu√©e.\n`;
                <% } %>

                message += "\n"; // Ligne vide pour s√©parer
            <% }); %>

            let url = "https://wa.me/?text=" + encodeURIComponent(message);
            window.location.href = url; // Redirection directe au lieu d'une pop-up
        } catch (error) {
            console.error("‚ùå Erreur r√©cup√©ration plong√©e:", error);
            alert("Impossible de r√©cup√©rer les informations de la plong√©e.");
        }
    }

    async function sendWhatsApp() {
    const plongeeId = "<%= typeof plongeeId !== 'undefined' ? plongeeId : '' %>";

    if (!plongeeId) {
        console.error("‚ùå Erreur : plongeeId est requis !");
        alert("ID de plong√©e requis");
        return;
    }

    try {
        console.log("üì° Envoi de la requ√™te pour g√©n√©rer le PDF...");

        // Appeler l'API qui g√©n√®re le PDF avec l'ID de la plong√©e
        const response = await fetch(`/generate-pdf?plongeeId=${plongeeId}`);
        
        // V√©rifier la r√©ponse de l'API
        if (!response.ok) {
            throw new Error(`Erreur lors de la g√©n√©ration du PDF (${response.status})`);
        }

        const data = await response.json();
        const pdfUrl = window.location.origin + data.url;

        // V√©rifiez si l'URL du PDF est valide
        if (!pdfUrl) {
            console.error("‚ùå PDF URL est invalide ou vide");
            alert("Le PDF n'a pas pu √™tre g√©n√©r√©");
            return;
        }

        console.log("‚úÖ PDF g√©n√©r√© avec succ√®s !");

        // Construire le message WhatsApp avec le lien du PDF
        const message = encodeURIComponent(`üìÑ Voici les param√®tres de la plong√©e : ${pdfUrl}`);
        const whatsappUrl = `https://wa.me/?text=${message}`;

        // Rediriger vers WhatsApp
        window.location.href = whatsappUrl;  // Utilisation de redirection directe
    } catch (error) {
        console.error("‚ùå Erreur lors de la g√©n√©ration du PDF :", error);
        alert("Erreur lors de la g√©n√©ration du PDF. Veuillez r√©essayer.");
    }
}


</script>


    <!-- IndexedDB and App Scripts -->
    <!--<script src="/js/indexeddb.js"></script>
    <script src="/js/client.js"></script>-->
</body>
</html>

<style>
    /* Conteneur principal */
.palanquee-container {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    background-color: #1b263b;
    border-radius: 10px;
    padding: 20px;
    width: 90%;
    max-width: 600px;
    min-height: 180px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.3);
    margin: 15px auto;
    flex-wrap: wrap;
    position: relative; /* Permet un centrage absolu du bouton */
}

/* Colonne gauche */
.palanquee-left {
    width: 50%;
    text-align: left;
}

/* Colonne droite */
.palanquee-right {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
    width: 50%;
}

/* Case √† cocher sans marges et padding suppl√©mentaires */
.palanquee-right .paliers-checkbox {
    margin: 0;  /* Retirer toute marge */
    padding: 0;  /* Retirer tout padding */
    width: 15px;  /* D√©finir la taille de la case √† cocher (tu peux ajuster si n√©cessaire) */
    height: 15px;  /* D√©finir la hauteur de la case √† cocher */
}

/* Labels */
.palanquee-right label {
    display: block;
    font-size: 14px;
    color: white;
    margin-top: 5px;
}

/* Champs de saisie */
.palanquee-right input {
    width: 80%;
    padding: 5px;
    margin-top: 3px;
    border-radius: 5px;
    border: none;
    font-size: 14px;
    background-color: white;
    color: black;
}

/* Conteneur du bouton pour le centrer */
.btn-container {
    width: 100%;
    display: flex;
    justify-content: center; /* üîπ Centre le bouton */
    position: absolute;
    bottom: 20px; /* üîπ Ajuste la position en bas */
}

/* Bouton Enregistrer */
.btn-enregistrer {
    padding: 10px 20px;
    background-color: #28a745; /* ‚úÖ Vert */
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
}

/* Bouton Enregistrer */
.btn-enregistrer-consignes {
    padding: 10px 20px;
    background-color: #28a745; /* ‚úÖ Vert */
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
}

.btn-enregistrer:disabled {
    background-color: gray;
    cursor: not-allowed;
}

.btn-enregistrer-consignes:disabled {
    background-color: gray;
    cursor: not-allowed;
}

    </style>
    
    
