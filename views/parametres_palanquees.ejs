<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Param√®tres | Palanquee Pro</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            light: '#5E9DFF',
                            DEFAULT: '#2A70E0',
                            dark: '#1A4A9C',
                        },
                        secondary: {
                            light: '#4FD1C5',
                            DEFAULT: '#38B2AC',
                            dark: '#2C7A7B',
                        },
                        accent: {
                            light: '#F6AD55',
                            DEFAULT: '#ED8936',
                            dark: '#DD6B20',
                        },
                        dark: {
                            light: '#2D3748',
                            DEFAULT: '#1A202C',
                            dark: '#171923',
                        }
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                }
            }
        }
    </script>

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/style.css">
</head>

<body class="bg-gradient-to-b from-dark-dark to-dark-light text-white font-sans min-h-screen pb-16">

    <!-- Conteneur principal -->
    <div class="w-full max-w-3xl mx-auto p-4 sm:p-6 relative">
        <!-- Bouton de retour -->
        <button onclick="window.history.back()"
            class="absolute top-6 left-6 text-gray-300 hover:text-white transition-colors">
            <i class="fas fa-arrow-left text-xl"></i>
        </button>

        <!-- Titre -->
        <div class="text-center mb-8">
            <h1 class="text-2xl sm:text-3xl font-bold">
                <span
                    class="text-transparent bg-clip-text bg-gradient-to-r from-primary-light to-secondary-light">Param√®tres</span>
            </h1>
        </div>

        <!-- Boutons d'action -->
        <div class="flex justify-center gap-4 mb-6">
            <a href="javascript:void(0);" onclick="envoyerParWhatsApp()"
                class="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-4 py-2 rounded-lg flex items-center <%= roleClasses.button %>">
                <img src="https://upload.wikimedia.org/wikipedia/commons/5/5e/WhatsApp_icon.png" alt="WhatsApp"
                    class="w-5 h-5 mr-2">
                Partager
            </a>
            <button onclick="sendWhatsApp()"
                class="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white px-4 py-2 rounded-lg flex items-center <%= roleClasses.button %>">
                <img src="/icons/iconPDF.png" alt="PDF" class="w-5 h-5 mr-2">
                PDF
            </button>
        </div>

        <% if (palanquees && palanquees.length> 0) { %>
            <% palanquees.sort(function(a, b) { return a.nom.localeCompare(b.nom); }); %>
                <% palanquees.forEach(function(palanquee) { %>
                    <div class="bg-dark-light rounded-2xl p-6 shadow-lg border border-gray-700 mb-6">
                        <!-- En-t√™te -->
                        <div class="text-center mb-4 relative">
                            <div class="flex justify-center items-center">  <!-- Modification ici -->
                                <h2 class="text-lg font-bold text-primary-light inline-block mr-2">  <!-- Ajout de inline-block et mr-2 -->
                                    <%= palanquee.nom %>
                                </h2>
                                <!-- Bouton rond pour mise √† l'eau -->
                                <button class="mise-a-leau-btn absolute right-0 w-14 h-14 rounded-full <%= palanquee.heure_mise_a_leau ? 'bg-green-500' : 'bg-blue-500 hover:bg-blue-600' %> text-white flex items-center justify-center shadow-md transition-all group"
                                    data-palanquee-id="<%= palanquee.id %>"
                                    title="<%= palanquee.heure_mise_a_leau ? 'Mise √† l\'eau effectu√©e' : 'D√©clencher la mise √† l\'eau' %>">
                                <div class="relative w-6 h-6 flex items-center justify-center">
                                    <% if (palanquee.heure_mise_a_leau) { %>
                                        <i class="fas fa-check text-lg"></i>
                                    <% } else { %>
                                        <i class="fas fa-play text-lg"></i>
                                        
                                    <% } %>
                                </div>
                            </button>
                            </div>
                            <div class="flex flex-wrap justify-center gap-2 mt-2">
                                <% if (palanquee.plongeurs && palanquee.plongeurs.length> 0) {
                                    palanquee.plongeurs.sort(function(a, b) {
                                    const aEstBleu = !["N1", "N2", "N3", "PE40"].includes(a.niveau_plongeur_historique);
                                    const bEstBleu = !["N1", "N2", "N3", "PE40"].includes(b.niveau_plongeur_historique);
                                    return aEstBleu === bEstBleu ? 0 : aEstBleu ? -1 : 1;
                                    });
                                    palanquee.plongeurs.forEach(function(plongeur, index) {
                                    let couleurClasse = (["N1", "N2", "N3",
                                    "PE40"].includes(plongeur.niveau_plongeur_historique)) ? "text-green-400" :
                                    "text-blue-400";
                                    %>
                                    <span class="<%= couleurClasse %> text-sm font-medium">
                                        <%= plongeur.nom %> (<%= plongeur.niveau_plongeur_historique || "N/A" %>)
                                    </span>
                                    <% }); } else { %>
                                        <span class="text-gray-400 text-sm italic">Aucun plongeur</span>
                                        <% } %>
                            </div>
                        </div>

                        <!-- üü¶ Les deux blocs - version responsive -->
                        <div class="palanquee-blocs flex flex-col md:flex-row gap-4">
                            <!-- üîµ Bloc "Consignes DP" -->
                            <div
                                class="bloc-consignes bg-gradient-to-br from-primary-dark/40 via-primary-dark/20 to-primary-light/20 border border-primary-light/10 text-white p-3 sm:p-4 rounded-xl w-full md:w-1/2 flex flex-col shadow-lg">
                                <p class="font-bold text-center mb-2 sm:mb-3 text-primary-light/90 text-sm sm:text-lg">
                                    Consignes DP</p>
                                <form id="consignes-form-<%= palanquee.id %>"
                                    class="grid grid-cols-1 sm:grid-cols-2 gap-x-3 gap-y-1 sm:gap-y-2 items-center mb-2 sm:mb-3">
                                    <input type="hidden" name="palanquee_id" value="<%= palanquee.id %>">

                                    <!-- Profondeur -->
                                    <label class="text-xs sm:text-sm text-left sm:text-right text-primary-light/80 font-medium mt-1 sm:mt-0">
                                        Profondeur :
                                    </label>
                                    <input 
                                        type="number" 
                                        name="prof_max"
                                        class="prof-max w-full p-1 sm:p-2 text-xs sm:text-sm rounded-lg bg-white border border-primary-light/15 text-black focus:border-primary-light focus:ring-2 focus:ring-primary-light/30 transition"
                                        value="<%= palanquee.prof_max || '' %>" 
                                        <%= palanquee.prof_max ? 'disabled' : '' %> 
                                        required 
                                        inputmode="numeric"
                                    >

                                    <!-- Dur√©e -->
                                    <label class="text-xs sm:text-sm text-left sm:text-right text-primary-light/80 font-medium mt-1 sm:mt-0">
                                        Dur√©e :
                                    </label>
                                    <input 
                                        type="number" 
                                        name="duree_max"
                                        class="duree-max w-full p-1 sm:p-2 text-xs sm:text-sm rounded-lg bg-white border border-primary-light/15 text-black focus:border-primary-light focus:ring-2 focus:ring-primary-light/30 transition"
                                        value="<%= palanquee.duree_max || '' %>" 
                                        <%= palanquee.duree_max ? 'disabled' : '' %> 
                                        required 
                                        inputmode="numeric"
                                    >
                                </form>

                                <!-- Bouton en bas du bloc -->
                                <div class="mt-auto">
                                    <button type="submit"
                                        class="btn-enregistrer-consignes w-full py-1 sm:py-2 px-2 sm:px-4 bg-gradient-to-r from-primary-dark to-primary-light text-white rounded-lg transition-all flex items-center justify-center gap-1 sm:gap-2 shadow-md text-xs sm:text-sm"
                                        data-form-id="consignes-form-<%= palanquee.id %>" <%=(palanquee.prof_max &&
                                        palanquee.duree_max) ? 'disabled="disabled"' : '' %>
                                        onclick="desactiverChamps('<%= palanquee.id %>')">
                                            <i class="fas fa-save text-xs sm:text-sm"></i>
                                            Enregistrer
                                    </button>
                                </div>
                            </div>

                            <!-- üü¢ Partie "R√©alis√©" -->
                            <div
                                class="bloc-formulaire bg-gradient-to-br from-secondary-dark/40 via-secondary-dark/20 to-secondary-light/20 border border-secondary-light/10 text-white p-3 sm:p-4 rounded-xl w-full md:w-1/2 flex flex-col shadow-lg">
                                <p
                                    class="font-bold text-center mb-2 sm:mb-3 text-secondary-light/90 text-sm sm:text-lg">
                                    R√©alis√©s</p>
                                <form id="form-<%= palanquee.id %>"
                                    class="palanquee-form grid grid-cols-1 sm:grid-cols-2 gap-x-3 gap-y-1 sm:gap-y-2 items-center mb-2 sm:mb-3">
                                    <input type="hidden" name="palanquee_id" value="<%= palanquee.id %>">

                                    <!-- Profondeur -->
                                    <label class="text-xs sm:text-sm text-left sm:text-right text-secondary-light/80 font-medium mt-1 sm:mt-0">
                                        Profondeur :
                                    </label>
                                    <input 
                                        type="number" 
                                        name="profondeur"
                                        class="profondeur w-full p-1 sm:p-2 text-xs sm:text-sm rounded-lg bg-white border border-secondary-light/15 text-black focus:border-secondary-light focus:ring-2 focus:ring-secondary-light/30 transition"
                                        value="<%= palanquee.profondeur || '' %>" 
                                        <%= palanquee.profondeur ? 'disabled' : '' %> 
                                        required 
                                        inputmode="numeric"
                                    >

                                    <!-- Dur√©e -->
                                    <label class="text-xs sm:text-sm text-left sm:text-right text-secondary-light/80 font-medium mt-1 sm:mt-0">
                                        Dur√©e :
                                    </label>
                                    <input 
                                        type="number" 
                                        name="duree"
                                        class="duree w-full p-1 sm:p-2 text-xs sm:text-sm rounded-lg bg-white border border-secondary-light/15 text-black focus:border-secondary-light focus:ring-2 focus:ring-secondary-light/30 transition"
                                        value="<%= palanquee.duree || '' %>" 
                                        <%= palanquee.duree ? 'disabled' : '' %> 
                                        required 
                                        inputmode="numeric"
                                    >

                                    <!-- Paliers -->
                                    <label class="text-xs sm:text-sm text-left sm:text-right text-secondary-light/80 font-medium mt-1 sm:mt-0">
                                        Paliers :
                                    </label>
                                    <input 
                                        type="text" 
                                        name="paliers"
                                        class="paliers w-full p-1 sm:p-2 text-xs sm:text-sm rounded-lg bg-white border border-secondary-light/15 text-black focus:border-secondary-light focus:ring-2 focus:ring-secondary-light/30 transition"
                                        value="<%= palanquee.paliers || '' %>" 
                                        <%= palanquee.paliers ? 'disabled' : '' %> 
                                        required
                                    >

                                    <!-- Checkbox align√©e -->
                                    <div class="col-span-1 sm:col-span-2 flex items-center gap-2 mt-1">
                                        <input type="checkbox" id="paliers-<%= palanquee.id %>-checkbox"
                                            class="paliers-checkbox h-3 w-3 sm:h-4 sm:w-4 accent-secondary-light border border-secondary-light/30 rounded focus:ring-secondary-light/50">
                                        <label for="paliers-<%= palanquee.id %>-checkbox"
                                            class="text-xs sm:text-sm text-secondary-light/80">3min / 3m S√©cu</label>
                                    </div>

                                    <!-- Cases √† cocher "Exploration" et "Formation" -->
                                    <div class="col-span-1 sm:col-span-2 flex items-center gap-2 sm:gap-4 mt-1">
                                        <div class="flex items-center">
                                            <input type="radio" id="exploration-<%= palanquee.id %>"
                                                name="type-<%= palanquee.id %>" value="Exploration" <%=(!palanquee.type
                                                || palanquee.type==='exploration' ) ? 'checked' : '' %>
                                            class="type-radio h-3 w-3 sm:h-4 sm:w-4 accent-secondary-light border
                                            border-secondary-light/30 focus:ring-secondary-light/50">
                                            <label for="exploration-<%= palanquee.id %>"
                                                class="text-xs sm:text-sm text-secondary-light/80 ml-1 sm:ml-2">Explo</label>
                                        </div>
                                        <div class="flex items-center">
                                            <input type="radio" id="formation-<%= palanquee.id %>"
                                                name="type-<%= palanquee.id %>" value="Formation"
                                                <%=palanquee.type==='formation' ? 'checked' : '' %> class="type-radio
                                            h-3 w-3 sm:h-4 sm:w-4 accent-secondary-light border
                                            border-secondary-light/30 focus:ring-secondary-light/50">
                                            <label for="formation-<%= palanquee.id %>"
                                                class="text-xs sm:text-sm text-secondary-light/80 ml-1 sm:ml-2">Formation</label>
                                        </div>
                                    </div>
                                </form>

                                <!-- Bouton en bas du bloc -->
                                <div class="mt-auto">
                                    <button type="submit"
                                        class="btn-enregistrer w-full py-1 sm:py-2 px-2 sm:px-4 bg-gradient-to-r from-secondary-dark to-secondary-light text-white rounded-lg transition-all flex items-center justify-center gap-1 sm:gap-2 shadow-md text-xs sm:text-sm"
                                        data-form-id="form-<%= palanquee.id %>" <%=(palanquee.duree &&
                                        palanquee.profondeur && palanquee.paliers) ? 'disabled' : '' %>>
                                        <i class="fas fa-save text-xs sm:text-sm"></i>
                                        Enregistrer
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <div class="bg-dark-light rounded-2xl p-6 text-center text-gray-400">
                                Aucune palanqu√©e disponible pour cette plong√©e
                            </div>
                            <% } %>
    </div>

    <!-- Bottom Navigation -->
    <!-- Bottom Navigation -->
    <nav
        class="fixed bottom-0 left-0 w-full bg-dark-light bg-opacity-90 backdrop-blur-md shadow-lg flex justify-around py-3 rounded-t-2xl border-t border-gray-700 z-40">
        <a href="/" class="nav-item text-gray-400 flex flex-col items-center">
            <i class="fas fa-home text-lg"></i>
            <span class="text-xs mt-1">Accueil</span>
        </a>
        <a href="/gestion-plongeurs" class="nav-item text-gray-400 flex flex-col items-center">
            <i class="fas fa-user-group text-lg"></i>
            <span class="text-xs mt-1">Plongeurs</span>
        </a>
        <a href="/gestion-sorties" class="nav-item text-gray-400 flex flex-col items-center">
            <i class="far fa-calendar-alt text-lg"></i>
            <span class="text-xs mt-1">Sorties</span>
        </a>
        <a href="/selection-sorties" class="nav-item active text-primary-light flex flex-col items-center">
            <i class="fas fa-layer-group text-lg"></i>
            <span class="text-xs mt-1">Palanqu√©es</span>
        </a>
    </nav>

    <script>
        // Fonction pour revenir √† l'√©cran pr√©c√©dent
        function retour() {
            history.back(); // Revenir √† la page pr√©c√©dente
        }

        const urlParams = new URLSearchParams(window.location.search);
        const plongeeId = urlParams.get("id"); // R√©cup√®re l'ID de la plong√©e depuis l'URL

        document.querySelectorAll(".btn-enregistrer").forEach(button => {
            button.addEventListener("click", async function (event) {
                event.preventDefault(); // Emp√™che le rechargement de la page
                this.disabled = true; // D√©sactive imm√©diatement le bouton pour √©viter un double clic

                // Trouver le formulaire en utilisant data-form-id
                const form = document.querySelector(`#${this.getAttribute("data-form-id")}`);
                if (!form) {
                    console.error("‚ùå Erreur : Le formulaire sp√©cifi√© par data-form-id n'a pas √©t√© trouv√©.");
                    alert("‚ùå Impossible d'enregistrer : formulaire non trouv√©.");
                    this.disabled = false;
                    return;
                }

                // R√©cup√©rer l'ID de la palanqu√©e √† partir de l'input name="palanquee_id"
                const palanqueeIdInput = form.querySelector("[name='palanquee_id']");
                if (!palanqueeIdInput) {
                    console.error("‚ùå Erreur : Champ palanquee_id introuvable dans le formulaire.");
                    alert("‚ùå Impossible d'enregistrer : ID de la palanqu√©e introuvable.");
                    this.disabled = false;
                    return;
                }

                const palanqueeId = palanqueeIdInput.value;

                if (!palanqueeId) {
                    console.error("‚ùå Erreur : ID de palanqu√©e manquant !");
                    alert("‚ùå Impossible d'enregistrer : ID de la palanqu√©e manquant.");
                    this.disabled = false;
                    return;
                }

                // V√©rifier si le formulaire existe
                const formElement = document.querySelector(`#form-${palanqueeId}`);

                if (!formElement) {
                    console.error(`‚ùå Erreur : Formulaire pour la palanqu√©e ${palanqueeId} introuvable !`);
                    alert(`‚ùå Erreur interne : formulaire #form-${palanqueeId} non trouv√©.`);
                    this.disabled = false;
                    return;
                }

                // R√©cup√©ration s√©curis√©e des champs
                const dureeInput = formElement.querySelector(".duree");
                const profondeurInput = formElement.querySelector(".profondeur");
                const paliersInput = formElement.querySelector(".paliers");

                if (!dureeInput || !profondeurInput || !paliersInput) {
                    console.error("‚ùå Erreur : Un ou plusieurs champs sont introuvables !");
                    alert("‚ùå Erreur interne : champs de saisie non trouv√©s.");
                    this.disabled = false;
                    return;
                }

                const duree = dureeInput.value;
                const profondeur = profondeurInput.value;
                const paliers = paliersInput.value;
                // R√©cup√©ration du type de plong√©e s√©lectionn√© (Exploration ou Formation)
                const typeInput = formElement.querySelector("input[name='type-" + palanqueeId + "']:checked");
                const type = typeInput ? typeInput.value : "exploration"; // Si rien n'est s√©lectionn√©, met "exploration"

                try {
                    const response = await fetch("/sauvegarder_parametres", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ id: palanqueeId, duree, profondeur, paliers, type })
                    });

                    if (!response.ok) throw new Error("Erreur serveur");

                    const result = await response.json();
                    if (result.success) {
                        //alert("‚úÖ Param√®tres enregistr√©s avec succ√®s !");
                        dureeInput.disabled = true;
                        profondeurInput.disabled = true;
                        paliersInput.disabled = true;
                    } else {
                        alert("‚ùå Erreur lors de l'enregistrement.");
                        this.disabled = false;
                    }
                } catch (error) {
                    console.error("üö® Erreur lors de la requ√™te ::", error);
                    alert("‚ùå Erreur de communication avec le serveur.");
                    this.disabled = false;
                }
            });
        });



        // Initialisation de la valeur "Aucun" dans le champ paliers au chargement de la page
        document.querySelectorAll(".palanquee-form").forEach(form => {
            const paliersInput = form.querySelector(".paliers");
            if (paliersInput && !paliersInput.value) {
                paliersInput.value = 'Aucun'; // Valeur par d√©faut "Aucun" au chargement de la page
            }
        });


        // Gestion de la case √† cocher pour les paliers
        document.querySelectorAll(".paliers-checkbox").forEach(checkbox => {
            checkbox.addEventListener("change", function () {
                // Extrait l'ID sans les pr√©fixes et suffixes
                const palanqueeId = this.id.replace("paliers-", "").replace("-checkbox", "");

                // Recherche le formulaire avec cet ID
                const form = document.querySelector(`#form-${palanqueeId}`);
                if (!form) {
                    console.error(`‚ùå ERREUR : Aucun formulaire trouv√© avec l'ID #form-${palanqueeId}`);
                    return;
                }

                // Recherche le champ .paliers dans le formulaire
                const paliersInput = form.querySelector(".paliers");
                if (!paliersInput) {
                    console.error(`‚ùå ERREUR : Aucun champ paliers trouv√© dans #form-${palanqueeId}`);
                    return;
                }

                // Si la case "3m / 3m S√©cu" est coch√©e, mettre la valeur dans le champ
                if (this.checked) {
                    // Si le champ est vide ou a la valeur "Aucun", mettre "3m / 3m S√©cu"
                    if (paliersInput.value === '' || paliersInput.value === 'Aucun') {
                        paliersInput.value = '3min / 3m S√©cu';
                    }
                } else {
                    // Si la case est d√©coch√©e, v√©rifier si une autre case est coch√©e
                    const anyChecked = form.querySelectorAll(".paliers-checkbox:checked").length > 0;

                    // Si aucune autre case n'est coch√©e, remettre "Aucun"
                    if (!anyChecked) {
                        paliersInput.value = 'Aucun';
                    }
                }
            });
        });

        document.querySelectorAll(".btn-enregistrer-consignes").forEach(button => {
            button.addEventListener("click", async function () {
                const form = this.closest('.bloc-consignes').querySelector('form');
                const palanqueeId = form.querySelector('input[name="palanquee_id"]').value;
                const profMax = form.querySelector('.prof-max').value;
                const dureeMax = form.querySelector('.duree-max').value;

                if (!profMax || !dureeMax) {
                    alert("Veuillez remplir tous les champs !");
                    return;
                }

                try {
                    const response = await fetch('/enregistrer-consignes', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ palanquee_id: palanqueeId, prof_max: profMax, duree_max: dureeMax })
                    });

                    const result = await response.json();
                    if (result.success) {
                        //alert("Consignes DP enregistr√©es !");
                    } else {
                        alert("Erreur : " + result.error);
                    }
                } catch (error) {
                    console.error("Erreur lors de l'enregistrement :", error);
                    alert("Une erreur est survenue !");
                }
            });
        });

        function desactiverChamps(palanqueeId) {
            // R√©cup√©rer le formulaire correspondant
            const form = document.getElementById(`consignes-form-${palanqueeId}`);

            if (!form) return; // S√©curit√© si le formulaire n'existe pas

            // R√©cup√©rer les champs Prof et Dur√©e
            const profInput = form.querySelector("input[name='prof_max']");
            const dureeInput = form.querySelector("input[name='duree_max']");

            // V√©rifier que les deux champs sont bien remplis
            if (profInput.value.trim() !== "" && dureeInput.value.trim() !== "") {
                // D√©sactiver les champs
                profInput.disabled = true;
                dureeInput.disabled = true;

                // D√©sactiver le bouton d'enregistrement
                const bouton = document.querySelector(`[data-form-id="consignes-form-${palanqueeId}"]`);
                if (bouton) {
                    bouton.disabled = true;
                }
            }
        }


        async function envoyerParWhatsApp() {
            const plongeeId = "<%= typeof plongeeId !== 'undefined' ? plongeeId : '' %>";

            try {
                const response = await fetch(`/plongee_info?id=${plongeeId}`);
                const data = await response.json();

                if (data.error) {
                    alert("Erreur : " + data.error);
                    return;
                }

                    // R√©cup√©rer l'URL de l'image
                    let imageUrl = data.image_url; // On suppose que l'URL de l'image est dans 'image_url'

                    // V√©rifie si l'URL ne contient pas 'object/public' et l'ajoute si n√©cessaire
                    if (imageUrl && !imageUrl.includes('object/public')) {
                        imageUrl = imageUrl.replace('storage/v1/', 'storage/v1/object/public/');
                    }

                // Afficher l'objet sous forme de tableau
                console.table(data);

                let heurePlongee = data.heure_debut;
                let heurePlongeeFormattee = "Heure inconnue";
                if (heurePlongee) {
                    let [heures, minutes] = heurePlongee.split(":");
                    heurePlongeeFormattee = `${heures}h${minutes}`;
                }

                let datePlongee = data.date;
                if (!datePlongee || datePlongee.toLowerCase().includes("invalid")) {
                    datePlongee = "Date inconnue";
                }

                let nomSitePlongee = data.site || "Site inconnu";
                let nomDuDP = data.nomdp || "DP non trouv√©";
                let niveauDuDP = data.niveaudp || "Niveau non trouv√©";

                let message = `üåä *Compte-rendu Plong√©e* üåä\n`;
                message += `ü§ø *Plong√©e n¬∞1 - ${nomSitePlongee}*\n`;
                message += `üìÖ *Date* : ${datePlongee}\n`;
                message += `üë®‚Äçüíº *Directeur de plong√©e* - ${nomDuDP} (${niveauDuDP})\n`;
                message += `------------------------------ \n\n`;

                <% palanquees.forEach(function (palanquee) { %>
                    message += `üîπ *Palanqu√©e <%= palanquee.nom %>*\n`;
                    message += `üìè *Heure de mise √† l'eau* : <%= palanquee.heure_mise_a_leau || 'Non d√©fini' %>\n`;
                    message += `üìè *Profondeur* : <%= palanquee.profondeur || 'Non d√©fini' %> m\n`;
                    message += `‚è≥ *Dur√©e* : <%= palanquee.duree || 'Non d√©fini' %> min\n`;
                    message += `‚öì *Paliers* : <%= palanquee.paliers || 'Non d√©finis' %>\n`;
                    message += `üë• *Plongeurs* :\n`;

                <% if (palanquee.plongeurs && palanquee.plongeurs.length > 0) { %>
                    <% palanquee.plongeurs.forEach(function (plongeur) { %>
                        message += `   - <%= plongeur.nom %> (<%= plongeur.niveau_plongeur_historique %>)\n`;
                    <% }); %>
                <% } else { %>
                    message += `   Aucun plongeur dans cette palanqu√©e.\n`;
                <% } %>

                    message += "\n"; // Ligne vide pour s√©parer
                <% }); %>

                // Si une image existe, on l'ajoute dans le message
                if (imageUrl) {
                    message += `üì∏ *Image de la plong√©e* : ${imageUrl}\n`; // Ins√©rer l'URL de l'image ici
                }



                let url = "https://wa.me/?text=" + encodeURIComponent(message);
                window.location.href = url; // Redirection directe au lieu d'une pop-up
            } catch (error) {
                console.error("‚ùå Erreur r√©cup√©ration plong√©e:", error);
                alert("Impossible de r√©cup√©rer les informations de la plong√©e.");
            }
        }


        let currentPdfUrl = ""; // variable globale temporaire

async function sendWhatsApp() {
    const plongeeId = "<%= typeof plongeeId !== 'undefined' ? plongeeId : '' %>";

    if (!plongeeId) {
        console.error("‚ùå Erreur : plongeeId est requis !");
        alert("ID de plong√©e requis");
        return;
    }

    try {
        const response = await fetch(`/generate-pdf?plongeeId=${plongeeId}`);

        if (!response.ok) {
            throw new Error(`Erreur lors de la g√©n√©ration du PDF (${response.status})`);
        }

        const data = await response.json();
        const pdfUrl = window.location.origin + data.url;

        if (!pdfUrl) {
            console.error("‚ùå PDF URL est invalide ou vide");
            alert("Le PDF n'a pas pu √™tre g√©n√©r√©");
            return;
        }

        // Stocker l'URL pour l'utiliser apr√®s envoi
        currentPdfUrl = pdfUrl;

        // Afficher la modale avec email pr√©-rempli
        openEmailModal();

    } catch (error) {
        console.error("‚ùå Erreur lors de la g√©n√©ration du PDF :", error);
        alert("Erreur lors de la g√©n√©ration du PDF. Veuillez r√©essayer.");
    }
}

async function sendEmail() {
    const email = document.getElementById("emailInput").value;
    if (!email) return alert("‚ùó Veuillez entrer une adresse email");

    try {
        const response = await fetch("/send-email", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email, pdfUrl: currentPdfUrl })
        });

        const result = await response.json();
        if (response.ok) {
            //alert("‚úÖ Email envoy√© avec succ√®s !");
            showToastSuccess("üìß Email envoy√© !");
            closeEmailModal();

            // Apr√®s l‚Äôenvoi d‚Äôemail r√©ussi, ouvrir WhatsApp
            setTimeout(() => {
            const message = encodeURIComponent(`üìÑ Voici les param√®tres de la plong√©e : ${currentPdfUrl}`);
            const whatsappUrl = `https://wa.me/?text=${message}`;
            window.location.href = whatsappUrl; // Redirection vers WhatsApp
        }, 1500);

        } else {
            alert("‚ùå Erreur lors de l'envoi de l'email : " + result.error);
        }
    } catch (error) {
        alert("‚ùå Erreur de connexion ou serveur : " + error.message);
    }
}

function openEmailModal() {
    document.getElementById("emailModal").classList.remove("hidden");
  }

  function closeEmailModal() {
    document.getElementById("emailModal").classList.add("hidden");
  }



        // Fonction pour envoyer l'heure √† Supabase
        async function enregistrerMiseALeau(palanqueeId) {
            const now = new Date();
            const heures = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const secondes = String(now.getSeconds()).padStart(2, '0');
            const heureComplete = `${heures}:${minutes}:${secondes}`;

            try {
                const response = await fetch('/api/palanquees/mise-a-leau', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        palanquee_id: palanqueeId,
                        heure_mise_a_leau: heureComplete
                    })
                });

                if (!response.ok) throw new Error('Erreur serveur');
                
                // Feedback visuel
                const btn = document.querySelector(`[data-palanquee-id="${palanqueeId}"]`);
                btn.classList.remove('bg-blue-500', 'hover:bg-blue-600');
                btn.classList.add('bg-green-500');
                btn.innerHTML = `
                    <div class="relative w-6 h-6 flex items-center justify-center">
                        <i class="fas fa-check text-lg"></i>
                    </div>
                `;
                
            } catch (error) {
                console.error('Erreur:', error);
                alert("Erreur lors de l'enregistrement");
            }
        }

        // √âcouteur d'√©v√©nement am√©lior√© pour le bouton de mise √† l'eau
        document.addEventListener('click', async function(e) {
            const btn = e.target.closest('.mise-a-leau-btn');
            if (!btn || btn.classList.contains('bg-green-500')) return; // Sort si bouton d√©j√† valid√©
            
            // Bloque les clics multiples pendant le traitement
            if (btn.dataset.processing === 'true') return;
            btn.dataset.processing = 'true';
            
            try {
                const palanqueeId = btn.dataset.palanqueeId;
                const heureComplete = new Date().toLocaleTimeString('fr-FR', { 
                    hour: '2-digit', 
                    minute: '2-digit', 
                    second: '2-digit',
                    hour12: false 
                }); // Format "14:30:45"

                // Feedback visuel imm√©diat
                btn.classList.add('opacity-75', 'cursor-wait');
                
                const response = await fetch('/api/palanquees/mise-a-leau', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        palanquee_id: palanqueeId, 
                        heure_mise_a_leau: heureComplete 
                    })
                });

                if (!response.ok) throw new Error(await response.text());
                
                // Mise √† jour optimis√©e du bouton
                btn.classList.replace('bg-blue-500', 'bg-green-500');
                btn.classList.remove('opacity-75', 'cursor-wait', 'hover:bg-blue-600');
                btn.innerHTML = `
                    <div class="relative w-6 h-6 flex items-center justify-center">
                        <i class="fas fa-check text-lg"></i>
                    </div>
                `;
                btn.title = "Mise √† l'eau effectu√©e √† " + heureComplete;
                
            } catch (error) {
                console.error('Erreur:', error);
                showToast("Erreur lors de l'enregistrement", 'error'); // Remplace alert() par un toast si disponible
                btn.classList.remove('opacity-75', 'cursor-wait');
            } finally {
                btn.dataset.processing = 'false';
            }
        });

        function toggleClubEmail() {
    const checkbox = document.getElementById("useClubEmail");
    const emailInput = document.getElementById("emailInput");

    if (checkbox.checked) {
        emailInput.value = "feuillesdepalanquees@scc28.fr";
    } else {
        emailInput.value = "";
    }
}

function showToastSuccess(message = "Email envoy√© avec succ√®s !") {
    const toast = document.getElementById("toastSuccess");
    toast.querySelector("span").textContent = message;
    toast.classList.remove("hidden");

    // Disparition apr√®s 3 secondes
    setTimeout(() => {
        toast.classList.add("hidden");
    }, 3000);
}


    </script>
<!-- Modale d'envoi d'email -->
<div id="emailModal"
    class="hidden fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
    <div class="bg-dark-light border border-gray-700 rounded-2xl shadow-xl max-w-md w-full p-6 animate-fade-in">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-primary-light">Envoi du PDF</h3>
            <button onclick="closeEmailModal()"
                class="text-gray-400 hover:text-primary-light text-2xl transition-colors">
                &times;
            </button>
        </div>

        <div class="mb-4">
            <label class="block text-gray-400 mb-1 text-sm">Adresse email du destinataire</label>
            <input type="email" id="emailInput" required
                class="w-full px-3 py-2 bg-dark-dark border border-gray-700 rounded-lg focus:border-primary-light focus:ring-1 focus:ring-primary-light/50 placeholder-gray-500 transition-all"
                placeholder="ex: monclub@exemple.com">
        </div>

        <!-- ‚úÖ Case √† cocher -->
        <div class="flex items-center gap-2 text-sm text-gray-300 mb-6">
            <input type="checkbox" id="useClubEmail"
                class="accent-primary-light w-4 h-4 rounded transition-all" onchange="toggleClubEmail()" />
            <label for="useClubEmail" class="cursor-pointer">Utiliser l'email du club : feuillesdepalanquees@scc28.fr</label>
        </div>

        <div class="flex justify-end gap-2">
            <button onclick="closeEmailModal()"
                class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-gray-200 rounded-lg transition-colors">Annuler</button>
            <button onclick="sendEmail()"
                class="px-4 py-2 bg-primary-dark hover:bg-primary-light text-white rounded-lg transition-colors shadow-md font-medium flex items-center gap-2">
                <span>Envoyer</span>
                <i class="fas fa-paper-plane text-sm"></i>
            </button>
        </div>
    </div>
</div>
<!-- ‚úÖ Toast de succ√®s -->
<div id="toastSuccess"
    class="hidden fixed bottom-5 right-5 bg-green-600 text-white px-4 py-3 rounded-lg shadow-lg flex items-center gap-3 animate-fade-in z-50">
    <i class="fas fa-check-circle text-lg"></i>
    <span>Email envoy√© avec succ√®s !</span>
</div>


  
</body>

</html>