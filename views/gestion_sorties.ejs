<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Sorties</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white flex flex-col items-center min-h-screen">
        <!-- Bouton de retour en haut √† gauche -->
        <button onclick="window.history.back()" class="absolute top-4 left-4 text-white hover:text-gray-300 text-2xl">
            ‚Üê
        </button>

    <div class="w-full max-w-md p-6 text-center flex flex-col flex-grow">
        <h1 class="text-3xl font-bold mb-4">Gestion des Sorties</h1>
    
        <!-- Formulaire d'ajout de sortie (fixe en haut de la page) -->
        <form action="/ajouter-sortie" method="POST" class="bg-gray-800 p-4 rounded-lg shadow-md space-y-4 sticky top-0 z-10 bg-gray-800">
            <input type="text" id="lieu" name="lieu" placeholder="Lieu" required class="w-full p-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none">
            <div class="grid grid-cols-2 gap-2">
                <div>
                    <label for="date_debut" class="block text-sm">D√©but :</label>
                    <input type="date" id="date_debut" name="date_debut" required class="w-full p-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none">
                </div>
                <div>
                    <label for="date_fin" class="block text-sm">Fin :</label>
                    <input type="date" id="date_fin" name="date_fin" required class="w-full p-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:outline-none">
                </div>
            </div>
            <button type="submit" class="w-full bg-green-500 hover:bg-green-600 text-white py-2 rounded-md transition">Ajouter Sortie</button>
        </form>
    
        <h2 class="text-xl font-semibold mt-6 mb-2">Sorties</h2>
    
        <!-- Liste des sorties scrollable -->
        <div class="overflow-y-auto max-h-[calc(100vh-250px)] w-full p-2 space-y-2 no-scrollbar">
            <% sorties.forEach(sortie => { %>
                <div class="sortie bg-[rgba(42,68,102,1)] p-3 rounded-lg flex justify-between items-center shadow-md flex-wrap md:flex-nowrap">
                    <div>
                        <span class="font-bold"><%= sortie.lieu %></span> - 
                        <%= new Date(sortie.date_debut).toLocaleDateString('fr-FR', { month: '2-digit', year: 'numeric' }) %>
                        <span class="text-gray-400 text-sm">(<%= sortie.plongeurs_count || 0 %> plongeurs)</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button class="text-white hover:text-gray-300 ajouter-plongeur" data-id="<%= sortie.id %>">‚ûï</button>
                        <button class="text-red-500 hover:text-red-400 supprimer-sortie" data-id="<%= sortie.id %>">‚ùå</button>
                    </div>
                </div>
            <% }) %>
        </div>
    
        <!-- Liste des plongeurs (cach√©e par d√©faut) -->
        <div id="plongeurs-section" style="display: none;">
            <h2>S√©lectionner les plongeurs</h2>
            <form action="/ajouter-plongeurs-a-sortie" method="POST">
                <input type="hidden" id="sortie_id_hidden" name="sortie_id">
                
                <div id="liste-plongeurs">
                    <% plongeurs.sort((a, b) => a.nom.localeCompare(b.nom)); %> <!-- Tri des plongeurs par ordre alphab√©tique -->
                    <% plongeurs.forEach(plongeur => { %>
                        <label class="flex items-center space-x-2">
                            <input type="checkbox" name="plongeurs[]" value="<%= plongeur.id %>">
                            <span><%= plongeur.nom %></span>
                            <span class="checkmark" id="checkmark-<%= plongeur.id %>"></span>
                        </label>
                    <% }) %>
                </div>
                
        
                <button type="submit" class="add-button">Ajouter Plongeurs √† la Sortie</button>
            </form>
        </div>        
    </div>
    

    <!-- Bottom Navigation -->
    <div class="fixed bottom-0 left-0 w-full bg-gray-800 bg-opacity-80 backdrop-blur-md shadow-lg flex justify-around py-3 rounded-t-2xl">
        <a href="/" class="text-gray-400 hover:text-blue-400 flex flex-col items-center">
            <i class="fas fa-home text-xl"></i>
            <span class="text-xs">üè† Accueil</span>
        </a>
        <a href="/gestion-plongeurs" class="text-gray-400 hover:text-green-400 flex flex-col items-center">
            <i class="fas fa-users text-xl"></i>
            <span class="text-xs">üë§ Plongeurs</span>
        </a>
        <a href="/gestion-sorties" class="text-gray-400 hover:text-yellow-400 flex flex-col items-center">
            <i class="far fa-calendar-alt text-xl"></i>
            <span class="text-xs">ü§ø Sorties</span>
        </a>
        <a href="/selection-sorties" class="text-gray-400 hover:text-orange-400 flex flex-col items-center">
            <i class="fas fa-mask text-xl"></i>
            <span class="text-xs">üìã Palanqu√©es</span>
        </a>
    </div>

    <script>
        let currentSortieId = null;
    
        // Charger la liste des plongeurs au d√©but pour √©viter l'erreur "not defined"
        const plongeurs = <%- JSON.stringify(plongeurs) %>;
        console.log("Plongeurs charg√©s :", plongeurs);
    
        // Charger les plongeurs associ√©s lors du clic sur le bouton "+"
        document.querySelectorAll(".ajouter-plongeur").forEach((button) => {
    button.addEventListener("click", async function (event) {
        event.preventDefault();  // Emp√™cher la soumission du formulaire lors du clic sur "+"

        const sortieId = this.dataset.id;
        console.log(`Bouton "+" cliqu√© pour la sortie ID: ${sortieId}`);

        let sortieDiv = this.closest(".sortie");
        if (!sortieDiv) {
            console.error("Erreur : Impossible de trouver la sortie correspondante !");
            return;
        }

        // V√©rifier si la section existe d√©j√†
        let existingSection = document.getElementById(`plongeurs-section-${sortieId}`);
        if (existingSection) {
            console.log("Section d√©j√† affich√©e, suppression...");
            existingSection.remove(); // Ferme si d√©j√† ouvert
            return;
        }

        document.querySelectorAll(".plongeurs-section").forEach((section) => section.remove()); // Fermer toute autre section

        try {
            console.log("Fetching plongeurs associ√©s...");
            const response = await fetch(`/get-plongeurs-sortie/${sortieId}`);

            if (!response.ok) {
                throw new Error("Erreur r√©seau");
            }

            const plongeursAssocies = await response.json();
            console.log("Plongeurs associ√©s r√©cup√©r√©s :", plongeursAssocies);

            // Assure-toi que plongeursAssocies.plongeurs_associes est un tableau
            const plongeursAssociesArray = Array.isArray(plongeursAssocies.plongeurs_associes) ? plongeursAssocies.plongeurs_associes : [];

            // Construire le HTML pour les plongeurs
            let plongeursHTML = `
                <div id="plongeurs-section-${sortieId}" class="plongeurs-section bg-gray-900 p-4 mt-2 rounded-lg shadow-md">
                    <h2 class="text-xl font-bold text-white mb-2">S√©lectionner les plongeurs</h2>
                    <form action="/ajouter-plongeurs-a-sortie" method="POST">
                        <input type="hidden" name="sortie_id" value="${sortieId}">`;

            plongeurs.forEach((plongeur) => {
                let checkmark = "";
                let removeButton = "";

                // V√©rifier si le plongeur est associ√© √† la sortie en comparant avec l'ID
                if (plongeursAssociesArray.includes(plongeur.id)) {
                    checkmark = "‚úÖ";
                    removeButton = `<button type="button" class="remove-plongeur text-red-500 hover:text-red-400"
                            data-plongeur-id="${plongeur.id}" data-sortie-id="${sortieId}">‚ùå</button>`;
                }   
                

                plongeursHTML += `
                    <div class="flex justify-between items-center bg-gray-800 p-2 rounded-md mb-2">
                        <label class="text-white flex items-center space-x-2">
                            <input type="checkbox" name="plongeurs[]" value="${plongeur.id}" class="form-checkbox text-blue-500">
                            <span>${plongeur.nom}</span>
                        </label>
                        <span id="checkmark-${plongeur.id}" class="text-green-400">${checkmark}</span>
                        ${removeButton}
                    </div>`;
            });

            plongeursHTML += `
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md w-full mt-3">
                    Ajouter Plongeurs
                </button>
            </form></div>`;

            if (sortieDiv) {
                sortieDiv.insertAdjacentHTML("afterend", plongeursHTML);
            } else {
                console.warn("Aucune sortie trouv√©e, ajout en fin de page.");
                document.body.insertAdjacentHTML("beforeend", plongeursHTML);
            }

            // G√©rer la suppression du plongeur au clic sur la croix rouge
            document.querySelectorAll(".remove-plongeur").forEach((removeButton) => {
                removeButton.addEventListener("click", async function (event) {
                    event.preventDefault();  // Emp√™cher la soumission du formulaire de mani√®re imm√©diate

                    const plongeurId = this.dataset.plongeurId;
                    const sortieId = this.dataset.sortieId;

                    console.log(`Suppression du plongeur ID: ${plongeurId} de la sortie ID: ${sortieId}`);

                    try {
                        console.log(`Plongeur ID: ${plongeurId}, Sortie ID: ${sortieId}`);
                        const response = await fetch(`/retirer-plongeur`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({ plongeurId: plongeurId, sortieId: sortieId }), // Modifi√© ici
                        });

                        if (response.ok) {
                            console.log(`Plongeur ID: ${plongeurId} supprim√© avec succ√®s`);
                            // Mettre √† jour l'interface utilisateur apr√®s suppression
                            this.closest(".flex").remove();
                            // Optionnel : Recharger la liste des plongeurs si tu veux afficher √† nouveau la liste compl√®te des plongeurs
                            await refreshPlongeursList();
                        } else {
                            console.error("Erreur lors de la suppression du plongeur");
                        }
                    } catch (error) {
                        console.error("Erreur de r√©seau :", error);
                    }
                });
            });
        } catch (error) {
            console.error("Erreur lors de la r√©cup√©ration des plongeurs associ√©s :", error);
        }
    });
});

// Fonction pour r√©cup√©rer et afficher la liste des plongeurs mise √† jour
async function refreshPlongeursList() {
    try {
        const response = await fetch(`/get-plongeurs-list`);
        const data = await response.json();

        if (response.ok) {
            // Mettre √† jour l'interface avec les nouveaux plongeurs
            const plongeursListContainer = document.querySelector(".plongeurs-list");
            plongeursListContainer.innerHTML = '';  // Vider la liste actuelle

            // Ajouter les plongeurs actualis√©s dans le DOM
            data.plongeurs.forEach(plongeur => {
                plongeursListContainer.innerHTML += `
                    <div class="plongeur-item">
                        <span>${plongeur.nom}</span>
                        <button class="remove-plongeur" data-plongeur-id="${plongeur.id}" data-sortie-id="${sortieId}">Retirer</button>
                    </div>
                `;
            });

        } else {
            console.error("Erreur lors du rafra√Æchissement de la liste des plongeurs");
        }
    } catch (error) {
        console.error("Erreur de r√©seau pour rafra√Æchir la liste des plongeurs :", error);
    }
}



document.querySelectorAll('.supprimer-sortie').forEach(button => {
            button.addEventListener('click', function () {
                const sortieId = this.dataset.id;
                if (confirm("√ätes-vous s√ªr de vouloir supprimer cette sortie ?")) {
                    fetch(`/supprimer-sortie/${sortieId}`, { method: 'DELETE' })
                        .then(response => {
                            if (response.ok) {
                                location.reload();
                            } else {
                                alert("Erreur lors de la suppression.");
                            }
                        })
                        .catch(error => console.error("Erreur:", error));
                }
            });
        });



    </script>
    
    
    

    <style>
        /* Cache la barre de d√©filement mais permet de scroller */
        .no-scrollbar::-webkit-scrollbar {
            display: none;
        }
        .no-scrollbar {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
    </style>
    <!-- IndexedDB and App Scripts -->
    <script src="/js/indexeddb.js"></script>
    <script src="/js/client.js"></script>
</body>
</html>
