<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Plong√©es</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white flex flex-col min-h-screen">
        <!-- Bouton de retour en haut √† gauche -->
        <button onclick="window.history.back()" class="absolute top-4 left-4 text-white hover:text-gray-300 text-2xl">
            ‚Üê
        </button>

    <div class="container mx-auto p-4 flex-grow">
        <h1 class="text-2xl font-bold text-center mb-2">
            Plong√©e du <span id="selected-date" data-date="<%= date %>">
                <%= new Date(date).toLocaleDateString('fr-FR', { day: '2-digit', month: 'long', year: 'numeric' }) %>
            </span>
        </h1>
        <p class="text-sm text-center text-white-600">
            Cliquez sur la plong√©e pour constituer les palanqu√©es
        </p>
        

        <ul class="space-y-3" id="plongeesList">
            <% if (plongees && plongees.length > 0) { %>
                <% plongees.forEach(function(plongee) { %>
                    <li class="bg-[rgba(42,68,102,1)] p-3 rounded-lg shadow-md w-full max-w-3xl mx-auto relative">
        
                        <!-- Premi√®re ligne : Plong√©e + Site + Croix suppression -->
                        <div class="flex items-center justify-between w-full text-white">
                            <span class="text-sm font-medium">
                                Plong√©e <%= plongee.numero %> - 
                                <span class="site-name"><%= plongee.site || "Nom du site" %></span>
                            </span>
                            <button type="button" class="remove-plongee text-red-500 hover:text-red-400"
                                data-plongee-id="<%= plongee.id %>">‚ùå</button>
                        </div>
        
                        <!-- Deuxi√®me ligne : DP -->
                        <div class="text-sm text-white mt-1">
                            DP : <span id="dp-name-<%= plongee.id %>" class="font-medium">Inconnu</span>
                        </div>
        
                        <!-- Troisi√®me ligne : Boutons d'action (centr√©s) -->
                        <div class="flex justify-center space-x-2 mt-2">
                            <button class="open-dp-modal bg-green-500 text-white px-3 py-1 rounded text-xs"
                                    data-plongee-id="<%= plongee.id %>"
                                    data-sortie-id="<%= plongee.sortie_id %>">
                                Choix du DP
                            </button>
                            <button class="edit-btn bg-blue-500 text-white px-3 py-1 rounded text-xs">Saisir le site</button>
                            <a href="/parametres_palanquees?id=<%= plongee.id %>">
                                <button class="bg-green-500 text-white px-3 py-1 rounded text-xs">Saisir les param√®tres</button>
                            </a>
                        </div>
        
                        <!-- Quatri√®me ligne : Bouton "G√©rer les palanqu√©es" centr√© et CLIQUABLE -->
                        <div class="flex justify-center mt-3">
                            <button class="manage-palanquees bg-yellow-500 text-white px-4 py-2 rounded text-sm font-semibold"
                                data-plongee-id="<%= plongee.id %>">
                                G√©rer les palanqu√©es
                            </button>
                        </div>
        
                    </li>
                <% }); %>
            <% } else { %>
                <p class="text-center text-gray-400">Aucune plong√©e √† afficher.</p>
            <% } %>
        </ul>
        

        <!-- Modal pour afficher les plongeurs -->
        <div id="dp-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-gray-800 p-6 rounded-2xl max-w-md w-full">
                <h2 class="text-2xl font-bold mb-4 text-white">Choix du directeur de plong√©e</h2>
                <ul id="dp-list" class="space-y-2 text-white">
                    <!-- Liste des plongeurs charg√©e dynamiquement -->
                </ul>
                <button id="close-modal" class="mt-4 bg-purple-500 text-white px-4 py-2 rounded-lg">Fermer</button>
            </div>
        </div>




        <div class="mt-6 flex justify-center">
            <button id="ajouter-plongee" class="bg-green-500 text-white px-4 py-2 rounded-lg shadow-md" data-date="<%= date %>">Ajouter Plong√©e</button>
        </div>
    </div>

    <!-- Bottom Navigation -->
    <div class="fixed bottom-0 left-0 w-full bg-gray-800 bg-opacity-80 backdrop-blur-md shadow-lg flex justify-around py-3 rounded-t-2xl">
        <a href="/" class="text-gray-400 hover:text-blue-400 flex flex-col items-center">
            <i class="fas fa-home text-xl"></i>
            <span class="text-xs">üè† Accueil</span>
        </a>
        <a href="/gestion-plongeurs" class="text-gray-400 hover:text-green-400 flex flex-col items-center">
            <i class="fas fa-users text-xl"></i>
            <span class="text-xs">üë§ Plongeurs</span>
        </a>
        <a href="/gestion-sorties" class="text-gray-400 hover:text-yellow-400 flex flex-col items-center">
            <i class="far fa-calendar-alt text-xl"></i>
            <span class="text-xs">ü§ø Sorties</span>
        </a>
        <a href="/selection-sorties" class="text-gray-400 hover:text-orange-400 flex flex-col items-center">
            <i class="fas fa-mask text-xl"></i>
            <span class="text-xs">üìã Palanqu√©es</span>
        </a>
    </div>

    <script>
        async function chargerPlongees() {
    const pathSegments = window.location.pathname.split("/");
    const sortieId = pathSegments[2];
    const sortieDate = document.getElementById("selected-date").getAttribute("data-date");

    try {
        console.log("üîç ID de la sortie :", sortieId, "| Date :", sortieDate); // Debug

        const response = await fetch(`/api/plongees/${sortieId}/${sortieDate}`);

        if (!response.ok) {
            throw new Error(`Erreur serveur (${response.status})`);
        }
        const plongees = await response.json();

        console.log("‚úÖ Plong√©es r√©cup√©r√©es avec site et dp :", plongees);

        // Mise √† jour de l'affichage
        const plongeesList = document.getElementById("plongeesList");
        plongeesList.innerHTML = ""; // Vide la liste

        if (plongees.length > 0) {
    // Trier les plong√©es par leur num√©ro
    plongees.sort((a, b) => a.numero - b.numero);

// Afficher les plong√©es tri√©es
for (let plongee of plongees) {
    const li = document.createElement("li");
    li.classList.add(
        "bg-[rgba(42,68,102,1)]",
        "p-3",
        "rounded-lg",
        "shadow-md",
        "w-full",
        "max-w-3xl",
        "mx-auto",
        "relative"
    );
    li.setAttribute("data-id", plongee.id); // ‚úÖ Ajout de l'ID ici

    const dpNom = plongee.nomdp ? await getDpNom(plongee.nomdp) : "Inconnu";

    li.innerHTML = `
        <!-- Premi√®re ligne : Plong√©e + Site -->
        <div class="flex items-center justify-between w-full text-white">
            <span class="text-sm font-medium">
                Plong√©e ${plongee.numero} - <span class="site-name">${plongee.site || "Nom du site"}</span>
            </span>
            <button type="button" class="remove-plongee text-red-500 hover:text-red-400"
                data-plongee-id="${plongee.id}">‚ùå</button>
        </div>

        <!-- Deuxi√®me ligne : DP -->
        <div class="text-sm text-white mt-1">
            DP : <span id="dp-name-${plongee.id}" class="font-medium">${dpNom}</span>
        </div>

        <!-- Troisi√®me ligne : Boutons d'action (centr√©s) -->
        <div class="flex justify-center space-x-2 mt-2">
            <button class="open-dp-modal bg-green-500 text-white px-3 py-1 rounded text-xs" data-plongee-id="${plongee.id}">
                Choix du DP
            </button>
            <button class="edit-btn bg-blue-500 text-white px-3 py-1 rounded text-xs">Saisir le site</button>
            <a href="/parametres_palanquees?id=${plongee.id}">
                <button class="bg-green-500 text-white px-3 py-1 rounded text-xs">Saisir les param√®tres</button>
            </a>
        </div>

        <!-- Quatri√®me ligne : Bouton "G√©rer les palanqu√©es" centr√© et CLIQUABLE -->
        <div class="flex justify-center mt-3">
            <a href="/gestion_palanquees?id=${plongee.id}">
                <button class="bg-yellow-500 text-white px-4 py-2 rounded text-sm font-semibold">
                    G√©rer les palanqu√©es
                </button>
            </a>
        </div>
    `;

    plongeesList.appendChild(li);
}
} else {
    plongeesList.innerHTML = `<p class="text-center text-gray-400">Aucune plong√©e √† afficher.</p>`;
}



            // Ajouter l'√©v√©nement de suppression
            document.querySelectorAll(".remove-plongee").forEach((btn) => {
                btn.addEventListener("click", async function (event) {
                    event.stopPropagation();
                    const li = this.closest("li");
                    const plongeeId = li.getAttribute("data-id");

                    if (confirm("Voulez-vous vraiment supprimer cette plong√©e ?")) {
                        await deletePlongee(plongeeId, li);
                    }
                });
            });

        // Ajout des gestionnaires d'√©v√©nements apr√®s avoir ajout√© les √©l√©ments √† la liste
        ajouterGestionnaireEvenements();
            } catch (error) {
                console.error("‚ùå Erreur lors du chargement des plong√©es :", error);
                alert("Erreur lors du chargement des plong√©es.");
            }
        }

        // Fonction pour supprimer une plong√©e via l'API
        async function deletePlongee(plongeeId, liElement) {
            if (!plongeeId) return;

            const response = await fetch(`/delete-plongee/${plongeeId}`, {
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            const data = await response.json();

            if (response.ok) {
                liElement.remove(); // Supprime visuellement la plong√©e si la suppression en base a r√©ussi
            } else {
                alert("Erreur lors de la suppression : " + data.error);
            }
        }




       // Fonction pour ajouter la gestion des √©v√©nements
function ajouterGestionnaireEvenements() {
    // Gestion de la redirection quand on clique sur une ligne
    document.querySelectorAll("#plongeesList li").forEach(item => {
        item.addEventListener("click", function (e) {
            // Emp√™cher la navigation si un input, un bouton ou "G√©rer les palanqu√©es" est cliqu√©
            if (
                e.target.tagName === "INPUT" || 
                e.target.classList.contains("edit-btn") || 
                e.target.classList.contains("open-dp-modal") || 
                e.target.classList.contains("manage-palanquees") // ‚úÖ Ajout de cette condition
            ) {
                e.stopPropagation(); // Emp√™che la navigation
                return;
            }

            const plongeeId = this.getAttribute("data-id");
            const dpNameElement = this.querySelector(`#dp-name-${plongeeId}`);

            // V√©rifier si le nom du DP est "Inconnu"
            if (dpNameElement && dpNameElement.textContent === "Inconnu") {
                alert("Veuillez s√©lectionner un DP.");
                return; // Emp√™che la navigation si le DP est "Inconnu"
            }

            // üö® Suppression de la redirection automatique
        });
    });




            // Fonction pour v√©rifier si l'ID est un UUID valide
            function isValidUUID(id) {
                const regex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;
                return regex.test(id);
            }

            // Gestion du bouton "Nom DP" pour ouvrir la modal
            document.querySelectorAll(".open-dp-modal").forEach(button => {
                button.addEventListener("click", function (e) {
                    e.stopPropagation(); // Emp√™che la redirection par d√©faut
                    
                    const plongeeId = this.closest("li").getAttribute("data-id");

                    // R√©cup√©rer l'ID de la sortie depuis l'URL
                    const pathSegments = window.location.pathname.split("/"); // Divise l'URL en segments
                    const sortieId = pathSegments[2]; // R√©cup√®re le deuxi√®me √©l√©ment apr√®s `/plongees/`

                    // Si l'ID est valide, ouvrir la modal
                    openDPModal(plongeeId, sortieId); // Ouvre la modal avec l'ID de la plong√©e et de la sortie
                });
            });



            // Gestion du bouton "Site"
            document.querySelectorAll(".edit-btn").forEach(button => {
                button.addEventListener("click", function (e) {
                    e.stopPropagation(); // Emp√™che la navigation
                    const li = this.closest("li");
                    const siteNameSpan = li.querySelector(".site-name");
                    const currentSiteName = siteNameSpan.textContent;

                    // Remplacer le texte par un formulaire
                    siteNameSpan.innerHTML = `
                        <input type="text" value="${currentSiteName}" class="site-input bg-gray-700 text-white p-1 rounded"/>
                        <button class="save-btn bg-green-500 text-white px-2 py-1 rounded ml-2">Valider</button>
                    `;

                    // Gestion du bouton "Valider"
                    li.querySelector(".save-btn").addEventListener("click", async function (e) {
                        e.preventDefault(); // Emp√™che la redirection par d√©faut
                        e.stopPropagation(); // Emp√™che la propagation de l'√©v√©nement
                        const newSiteName = li.querySelector(".site-input").value;
                        const plongeeId = li.getAttribute("data-id");

                        try {
                            console.log("üì° Envoi requ√™te API : /api/update-site", JSON.stringify({ plongeeId, site: newSiteName }));

                            const response = await fetch("/api/update-site", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ plongeeId: plongeeId, site: newSiteName })
                            });

                            if (!response.ok) {
                                throw new Error(`Erreur serveur (${response.status})`);
                            }

                            const data = await response.json();
                            console.log("‚úÖ Site mis √† jour :", data);
                            siteNameSpan.textContent = newSiteName; // Mettre √† jour le texte avec le nouveau nom du site
                        } catch (error) {
                            console.error("‚ùå Erreur lors de la mise √† jour du site :", error);
                            alert("Erreur lors de la mise √† jour du site");
                        }
                    });
                });
            });
        }


        document.addEventListener("DOMContentLoaded", function () {
            // üî• Extraire `sortie_id` depuis l'URL
            const pathSegments = window.location.pathname.split("/"); // Divise l'URL en segments
            const sortieId = pathSegments[2]; // R√©cup√®re le deuxi√®me √©l√©ment apr√®s `/plongees/`
            const sortieDate = document.getElementById("selected-date").getAttribute("data-date");
    
            console.log("üîπ sortie_id d√©tect√© :", sortieId);
    
            if (!sortieId || sortieId.length !== 36) {
                console.error("‚ùå Erreur : sortie_id invalide !");
                alert("Erreur : Aucun ID de sortie valide trouv√©.");
                return;
            }
    
            // R√©cup√©rer le bouton "Ajouter Plong√©e"
            const ajouterPlongeeBtn = document.getElementById("ajouter-plongee");
    
            if (ajouterPlongeeBtn) {
                ajouterPlongeeBtn.addEventListener("click", async () => {
                    console.log("üü¢ Bouton Ajouter Plong√©e cliqu√© !");
    
                    try {
                        const response = await fetch("/api/ajouter-plongee", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                sortie_id: sortieId, // üü¢ UUID d√©tect√© depuis l'URL
                                date: sortieDate // Date de la sortie pr√©vue
                            })
                        });
    
                        if (!response.ok) {
                            throw new Error(`Erreur serveur (${response.status})`);
                        }
    
                        const data = await response.json();
                        console.log("‚úÖ R√©ponse serveur :", data);
                        chargerPlongees(); // Recharge uniquement la liste des plong√©es
                    } catch (error) {
                        console.error("‚ùå Erreur lors de l'ajout :", error);
                        alert("Erreur lors de l'ajout de la plong√©e");
                    }
                });
            } else {
                console.error("‚ö†Ô∏è Bouton Ajouter Plong√©e non trouv√© !");
            }
        });


        // Fonction pour ouvrir la modal et charger les plongeurs
        async function openDPModal(plongeeId, sortieId) {
            try {
                const url = `/api/get-plongeurs?sortieId=${sortieId}`;

                // R√©cup√©rer les plongeurs associ√©s √† cette sortie
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`Erreur serveur (${response.status})`);
                }

                let plongeurs = await response.json();
                console.log("‚úÖ Plongeurs r√©cup√©r√©s :", plongeurs);

                // Filtrer les plongeurs pour ne conserver que ceux de niveau E3 ou E4
                plongeurs = plongeurs.filter(plongeur => plongeur.niveau === "E3" || plongeur.niveau === "E4");

                if (plongeurs.length === 0) {
                    alert("Aucun plongeur de niveau E3 ou E4 disponible.");
                }

                // Remplir la liste des plongeurs dans la modal
                const dpList = document.getElementById('dp-list');
                dpList.innerHTML = ''; // R√©initialise la liste

                plongeurs.forEach(plongeur => {
                    // Cr√©er un div cliquable pour chaque plongeur
                    const div = document.createElement('div');
                    div.classList.add('plongeur-item', 'bg-gray-700', 'text-white', 'p-3', 'rounded-lg', 'mb-2', 'cursor-pointer');
                    div.textContent = `${plongeur.nom} - Niveau: ${plongeur.niveau || 'Inconnu'}`;

                    // Ajouter un gestionnaire d'√©v√©nements pour s√©lectionner un plongeur
                    div.addEventListener('click', async function () {
                        // Mettre √† jour le nom du DP dans la plong√©e correspondante
                        const dpNameSpan = document.getElementById(`dp-name-${plongeeId}`);
                        dpNameSpan.textContent = plongeur.nom; // Remplacer "Inconnu" par le nom du plongeur s√©lectionn√©

                        // Fermer la modal
                        document.getElementById('dp-modal').classList.add('hidden');

                        // Mettre √† jour la plong√©e avec le nom du DP s√©lectionn√©
                        try {
                            const updateResponse = await fetch('/api/update-dp', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    plongeeId: plongeeId,
                                    nomDP: plongeur.id // Utilisation de l'ID du plongeur comme nomDP
                                })
                            });

                            if (!updateResponse.ok) {
                                throw new Error(`Erreur serveur (${updateResponse.status})`);
                            }

                            const updateData = await updateResponse.json();
                            console.log("‚úÖ Plong√©e mise √† jour avec le DP :", updateData);
                        } catch (error) {
                            console.error("‚ùå Erreur lors de la mise √† jour de la plong√©e :", error);
                            alert("Erreur lors de la mise √† jour du DP de la plong√©e.");
                        }
                    });

                    dpList.appendChild(div);
                });

                // Afficher la modal
                document.getElementById('dp-modal').classList.remove('hidden');
            } catch (error) {
                console.error("‚ùå Erreur lors de la r√©cup√©ration des plongeurs :", error);
                alert("Erreur lors de la r√©cup√©ration des plongeurs.");
            }
        }






        // Fonction pour fermer la modal
        document.getElementById('close-modal').addEventListener('click', function() {
            document.getElementById('dp-modal').classList.add('hidden');
        });

        async function getDpNom(nomdp) {
            if (!nomdp) {
                console.error("‚ùå Erreur : ID de DP est nul ou non d√©fini");
                return null; // Retourne null si le nomdp est invalide
            }

            try {
                const response = await fetch(`/api/plongeur/${nomdp}`);
                if (!response.ok) {
                    throw new Error(`Erreur serveur (${response.status})`);
                }
                const data = await response.json();
                return data.nom; // Suppose que la r√©ponse contient le nom du plongeur
            } catch (error) {
                console.error("‚ùå Erreur lors de la r√©cup√©ration du plongeur :", error);
                return null; // Retourne null en cas d'erreur
            }
        }



// Fonction pour r√©cup√©rer la date de la plong√©e √† partir de l'ID de la plong√©e
async function getPlongeeDate(plongeeId) {
    try {
        const response = await fetch(`/api/get-plongee-date?plongeeId=${plongeeId}`);
        if (!response.ok) {
            throw new Error(`Erreur serveur lors de la r√©cup√©ration de la date de la plong√©e (${response.status})`);
        }

        const data = await response.json();
        return data.date;  // Retourner la date de la plong√©e r√©cup√©r√©e
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration de la date de la plong√©e :", error);
        alert("Erreur lors de la r√©cup√©ration de la date de la plong√©e.");
        return null;  // Retourner null en cas d'erreur
    }
}

// Fonction pour fermer la modal
document.getElementById('close-modal').addEventListener('click', function() {
    document.getElementById('dp-modal').classList.add('hidden');
});


        // Charger les plong√©es et ajouter les gestionnaires d'√©v√©nements
        chargerPlongees();
    </script>
    <!-- IndexedDB and App Scripts -->
    <script src="/js/indexeddb.js"></script>
    <script src="/js/client.js"></script>
</body>
</html>

