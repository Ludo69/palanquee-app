<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Gestion des Plong√©es | Palanquee Pro</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            light: '#5E9DFF',
                            DEFAULT: '#2A70E0',
                            dark: '#1A4A9C',
                        },
                        secondary: {
                            light: '#4FD1C5',
                            DEFAULT: '#38B2AC',
                            dark: '#2C7A7B',
                        },
                        accent: {
                            light: '#F6AD55',
                            DEFAULT: '#ED8936',
                            dark: '#DD6B20',
                        },
                        dark: {
                            light: '#2D3748',
                            DEFAULT: '#1A202C',
                            dark: '#171923',
                        }
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                }
            }
        }
    </script>

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Fichier CSS -->
    <link rel="stylesheet" href="/style.css">

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body class="bg-gradient-to-b from-dark-dark to-dark-light text-white font-sans min-h-screen pb-16">

    <!-- Conteneur principal -->
    <div class="w-full max-w-3xl mx-auto p-4 sm:p-6 relative">
        <!-- Bouton de retour -->
        <button onclick="window.history.back()" class="absolute top-6 left-6 text-gray-300 hover:text-white transition-colors">
            <i class="fas fa-arrow-left text-xl"></i>
        </button>

        <!-- Titre -->
        <div class="text-center mb-8">
            <h1 class="text-2xl sm:text-3xl font-bold">
                <span class="text-transparent bg-clip-text bg-gradient-to-r from-primary-light to-secondary-light">Plong√©e du</span>
                <span class="text-gray-300">
                    <span id="selected-date" data-date="<%= date %>">
                        <%= new Date(date).toLocaleDateString('fr-FR', { day: '2-digit', month: 'long', year: 'numeric' }) %>
                    </span>
                </span>
            </h1>
            <p class="text-gray-400 mt-2">Cliquez sur la plong√©e pour constituer les palanqu√©es</p>
        </div>

        <!-- Liste des plong√©es -->
        <div class="space-y-4 mb-6">
            <% if (plongees && plongees.length > 0) { %>
                <% plongees.forEach(function(plongee) { %>
                    <div class="bg-dark-light rounded-2xl p-4 shadow-lg border border-gray-700">
                        <!-- En-t√™te de la plong√©e -->
                        <div class="flex justify-between items-center mb-2">
                            <h3 class="font-medium">
                                Plong√©e <%= plongee.numero %> - 
                                <span class="site-name"><%= plongee.site || "Nom du site" %></span>
                            </h3>
                            <button type="button" class="remove-plongee text-red-500 hover:text-red-400 transition-colors"
                                data-plongee-id="<%= plongee.id %>">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>

                        <!-- Directeur de plong√©e -->
                        <div class="text-sm text-gray-300 mb-3">
                            DP : <span id="dp-name-<%= plongee.id %>" class="font-medium">Inconnu</span>
                        </div>

                        <!-- Boutons d'actions -->
                        <div class="flex flex-wrap gap-2 mb-3">
                            <button class="open-dp-modal bg-gradient-to-r from-primary-light to-primary-dark hover:from-primary-dark hover:to-primary-light text-white px-3 py-1 rounded-lg text-sm transition-all"
                                data-plongee-id="<%= plongee.id %>" data-sortie-id="<%= plongee.sortie_id %>">
                                <i class="fas fa-user-shield mr-1"></i> Choix DP
                            </button>
                            
                            <button class="edit-btn bg-gradient-to-r from-secondary-light to-secondary-dark hover:from-secondary-dark hover:to-secondary-light text-white px-3 py-1 rounded-lg text-sm transition-all">
                                <i class="fas fa-map-marker-alt mr-1"></i> Saisir site
                            </button>
                            
                            <a href="/parametres_palanquees?id=<%= plongee.id %>" class="flex-1">
                                <button class="w-full bg-gradient-to-r from-accent-light to-accent-dark hover:from-accent-dark hover:to-accent-light text-white px-3 py-1 rounded-lg text-sm transition-all">
                                    <i class="fas fa-sliders-h mr-1"></i> Param√®tres
                                </button>
                            </a>
                        </div>

                        <!-- Boutons principaux -->
                        <div class="flex flex-wrap gap-2 mt-2">
                            <a href="/gestion_palanquees?id=<%= plongee.id %>" class="flex-1">
                                <button class="w-full bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-white py-2 rounded-lg font-medium transition-all">
                                    <i class="fas fa-layer-group mr-1"></i> Palanqu√©es
                                </button>
                            </a>
                            
                            <button class="start-plongee flex-1 <%= plongee.heure_debut ? 'bg-gray-600' : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700' %> text-white py-2 rounded-lg font-medium transition-all"
                                data-plongee-id="<%= plongee.id %>"
                                <%= plongee.heure_debut ? 'disabled' : '' %>>
                                <i class="fas fa-<%= plongee.heure_debut ? 'check' : 'play' %> mr-1"></i>
                                <%= plongee.heure_debut ? 'Plong√©e lanc√©e' : 'D√©marrer' %>
                            </button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="bg-dark-light rounded-2xl p-6 text-center text-gray-400">
                    Aucune plong√©e √† afficher
                </div>
            <% } %>
        </div>

        <!-- Bouton Ajouter Plong√©e -->
        <button id="ajouter-plongee" class="w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-3 rounded-lg font-medium transition-all"
            data-date="<%= date %>">
            <i class="fas fa-plus mr-2"></i> Ajouter Plong√©e
        </button>
    </div>

    <!-- Modal pour choix du DP -->
    <div id="dp-modal" class="hidden fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 px-4">
        <div class="bg-dark-light p-6 rounded-2xl max-w-sm w-full border border-gray-700">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold text-primary-light">
                    <i class="fas fa-user-shield mr-2"></i> Choix du DP
                </h2>
                <button id="close-modal" class="text-gray-400 hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <ul id="dp-list" class="space-y-2 max-h-60 overflow-y-auto no-scrollbar">
                <!-- Liste des plongeurs charg√©e dynamiquement -->
            </ul>
        </div>
    </div>

    <!-- Bottom Navigation -->
    <nav class="fixed bottom-0 left-0 w-full bg-dark-light bg-opacity-90 backdrop-blur-md shadow-lg flex justify-around py-3 rounded-t-2xl border-t border-gray-700 z-40">
        <a href="/" class="nav-item text-primary-light flex flex-col items-center">
            <i class="fas fa-home text-lg"></i>
            <span class="text-xs mt-1">Accueil</span>
        </a>
        <a href="/gestion-plongeurs" class="nav-item text-gray-400 flex flex-col items-center">
            <i class="fas fa-user-group text-lg"></i>
            <span class="text-xs mt-1">Plongeurs</span>
        </a>
        <a href="/gestion-sorties" class="nav-item text-gray-400 flex flex-col items-center">
            <i class="far fa-calendar-alt text-lg"></i>
            <span class="text-xs mt-1">Sorties</span>
        </a>
        <a href="/selection-sorties" class="nav-item active text-gray-400 flex flex-col items-center">
            <i class="fas fa-layer-group text-lg"></i>
            <span class="text-xs mt-1">Palanqu√©es</span>
        </a>
    </nav>

    <script>
        // [Vos fonctions JavaScript existantes restent inchang√©es]
        async function chargerPlongees() {
            const pathSegments = window.location.pathname.split("/");
            const sortieId = pathSegments[2];
            const sortieDate = document.getElementById("selected-date").getAttribute("data-date");

            try {
                console.log("üîç ID de la sortie :", sortieId, "| Date :", sortieDate);

                const response = await fetch(`/api/plongees/${sortieId}/${sortieDate}`);

                if (!response.ok) {
                    throw new Error(`Erreur serveur (${response.status})`);
                }
                const plongees = await response.json();

                console.log("‚úÖ Plong√©es r√©cup√©r√©es avec site et dp :", plongees);

                const plongeesList = document.querySelector(".space-y-4");
                plongeesList.innerHTML = "";

                if (plongees.length > 0) {
                    plongees.sort((a, b) => a.numero - b.numero);

                    for (let plongee of plongees) {
                        const dpInfos = plongee.nomdp ? await getDpInfos(plongee.nomdp) : { nom: "Inconnu", niveau: "?" };

                        const plongeeDiv = document.createElement("div");
                        plongeeDiv.className = "bg-dark-light rounded-2xl p-4 shadow-lg border border-gray-700";
                        plongeeDiv.setAttribute("data-id", plongee.id);

                        plongeeDiv.innerHTML = `
                            <div class="flex justify-between items-center mb-2">
                                <h3 class="font-medium">
                                    Plong√©e ${plongee.numero} - 
                                    <span class="site-name">${plongee.site || "Nom du site"}</span>
                                </h3>
                                <button type="button" class="remove-plongee text-red-500 hover:text-red-400 transition-colors"
                                    data-plongee-id="${plongee.id}">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>

                            <div class="text-sm text-gray-300 mb-3">
                                DP : <span id="dp-name-${plongee.id}" class="font-medium">
                                    ${dpInfos.nom} ${dpInfos.niveau ? ' - ' + dpInfos.niveau : ''}
                                </span>
                            </div>

                            <div class="flex flex-wrap gap-2 mb-3">
                                <button class="open-dp-modal bg-gradient-to-r from-primary-light to-primary-dark hover:from-primary-dark hover:to-primary-light text-white px-3 py-1 rounded-lg text-sm transition-all"
                                    data-plongee-id="${plongee.id}" data-sortie-id="${plongee.sortie_id}">
                                    <i class="fas fa-user-shield mr-1"></i> Choix DP
                                </button>
                                
                                <button class="edit-btn bg-gradient-to-r from-secondary-light to-secondary-dark hover:from-secondary-dark hover:to-secondary-light text-white px-3 py-1 rounded-lg text-sm transition-all">
                                    <i class="fas fa-map-marker-alt mr-1"></i> Saisir site
                                </button>
                                
                                <a href="/parametres_palanquees?id=${plongee.id}" class="flex-1">
                                    <button class="w-full bg-gradient-to-r from-accent-light to-accent-dark hover:from-accent-dark hover:to-accent-light text-white px-3 py-1 rounded-lg text-sm transition-all">
                                        <i class="fas fa-sliders-h mr-1"></i> Param√®tres
                                    </button>
                                </a>
                            </div>

                            <div class="flex flex-wrap gap-2 mt-2">
                                <a href="/gestion_palanquees?id=${plongee.id}" class="flex-1">
                                    <button class="w-full bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-white py-2 rounded-lg font-medium transition-all">
                                        <i class="fas fa-layer-group mr-1"></i> Palanqu√©es
                                    </button>
                                </a>
                                
                                <button class="start-plongee flex-1 ${plongee.heure_debut ? 'bg-gray-600' : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700'} text-white py-2 rounded-lg font-medium transition-all"
                                    data-plongee-id="${plongee.id}"
                                    ${plongee.heure_debut ? 'disabled' : ''}>
                                    <i class="fas fa-${plongee.heure_debut ? 'check' : 'play'} mr-1"></i>
                                    ${plongee.heure_debut ? 'Plong√©e lanc√©e' : 'D√©marrer'}
                                </button>
                            </div>
                        `;

                        plongeesList.appendChild(plongeeDiv);
                    }
                } else {
                    plongeesList.innerHTML = `
                        <div class="bg-dark-light rounded-2xl p-6 text-center text-gray-400">
                            Aucune plong√©e √† afficher
                        </div>
                    `;
                }

                ajouterGestionnaireEvenements();
            } catch (error) {
                console.error("‚ùå Erreur lors du chargement des plong√©es :", error);
                alert("Erreur lors du chargement des plong√©es.");
            }
        }

        async function deletePlongee(plongeeId, liElement) {
            if (!plongeeId) return;

            const response = await fetch(`/delete-plongee/${plongeeId}`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" },
            });

            const data = await response.json();

            if (response.ok) {
                liElement.remove();
            } else {
                alert("Erreur lors de la suppression : " + data.error);
            }
        }

        function ajouterGestionnaireEvenements() {
            document.querySelectorAll(".remove-plongee").forEach((btn) => {
                btn.addEventListener("click", async function (e) {
                    e.stopPropagation();
                    const div = this.closest("[data-id]");
                    const plongeeId = div.getAttribute("data-id");

                    if (confirm("Voulez-vous vraiment supprimer cette plong√©e ?")) {
                        await deletePlongee(plongeeId, div);
                    }
                });
            });

            // Ajoutez ce gestionnaire pour les boutons "Choix DP"
            document.querySelectorAll('.open-dp-modal').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const plongeeId = this.getAttribute('data-plongee-id');
                    const sortieId = this.getAttribute('data-sortie-id');
                    
                    // R√©cup√©rer l'ID de la sortie depuis l'URL si non fourni
                    if (!sortieId) {
                        const pathSegments = window.location.pathname.split('/');
                        sortieId = pathSegments[2];
                    }
                    
                    openDPModal(plongeeId, sortieId);
                });
            });

            document.querySelectorAll(".edit-btn").forEach(button => {
                button.addEventListener("click", function (e) {
                    e.stopPropagation();
                    const div = this.closest("[data-id]");
                    const siteNameSpan = div.querySelector(".site-name");
                    const currentSiteName = siteNameSpan.textContent;

                    siteNameSpan.innerHTML = `
                        <input type="text" value="${currentSiteName}" class="site-input bg-dark border border-gray-600 text-white p-1 rounded w-full"/>
                        <div class="flex justify-end mt-2">
                            <button class="save-btn bg-gradient-to-r from-green-500 to-green-600 text-white px-3 py-1 rounded text-sm">
                                <i class="fas fa-check mr-1"></i> Valider
                            </button>
                        </div>
                    `;

                    div.querySelector(".save-btn").addEventListener("click", async function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        const newSiteName = div.querySelector(".site-input").value;
                        const plongeeId = div.getAttribute("data-id");

                        try {
                            const response = await fetch("/api/update-site", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ plongeeId: plongeeId, site: newSiteName })
                            });

                            if (!response.ok) throw new Error(`Erreur serveur (${response.status})`);

                            const data = await response.json();
                            console.log("‚úÖ Site mis √† jour :", data);
                            siteNameSpan.textContent = newSiteName;
                        } catch (error) {
                            console.error("‚ùå Erreur lors de la mise √† jour du site :", error);
                            alert("Erreur lors de la mise √† jour du site");
                        }
                    });
                });
            });

            document.querySelectorAll(".start-plongee").forEach(button => {
                button.addEventListener("click", async function (e) {
                    const plongeeId = this.getAttribute("data-plongee-id");

                    try {
                        const now = new Date();  
                        const heureSQL = now.toISOString().split('T')[1].slice(0, 8);
                        
                        const response = await fetch("/api/lancer-plongee", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ plongeeId, startTime: heureSQL })
                        });

                        const result = await response.json();

                        if (!response.ok) throw new Error(result.error || "Erreur inconnue");

                        this.disabled = true;
                        this.classList.remove("bg-gradient-to-r", "from-green-500", "to-green-600", "hover:from-green-600", "hover:to-green-700");
                        this.classList.add("bg-gray-600");
                        this.innerHTML = '<i class="fas fa-check mr-1"></i>Plong√©e lanc√©e';
                        
                        window.location.reload();   
                    } catch (error) {
                        console.error("‚ùå Erreur :", error);
                        alert("Erreur : impossible d'enregistrer l'heure !");
                    }
                });
            });
        }

        async function openDPModal(plongeeId, sortieId) {
            try {
                const url = `/api/get-plongeurs?sortieId=${sortieId}`;
                const response = await fetch(url);
                if (!response.ok) throw new Error(`Erreur serveur (${response.status})`);

                let plongeurs = await response.json();
                console.log("‚úÖ Plongeurs r√©cup√©r√©s :", plongeurs);

                plongeurs = plongeurs.filter(plongeur => plongeur.niveau === "E3" || plongeur.niveau === "E4");

                if (plongeurs.length === 0) {
                    alert("Aucun plongeur de niveau E3 ou E4 disponible.");
                    return;
                }

                const dpList = document.getElementById('dp-list');
                dpList.innerHTML = '';

                plongeurs.forEach(plongeur => {
                    const div = document.createElement('div');
                    div.className = 'plongeur-item bg-dark border border-gray-600 text-white p-3 rounded-lg mb-2 cursor-pointer hover:bg-gray-700 transition-colors';
                    div.textContent = `${plongeur.nom} - Niveau: ${plongeur.niveau || 'Inconnu'}`;

                    div.addEventListener('click', async function () {
                        const dpNameSpan = document.getElementById(`dp-name-${plongeeId}`);
                        dpNameSpan.textContent = `${plongeur.nom} - ${plongeur.niveau}`;

                        document.getElementById('dp-modal').classList.add('hidden');

                        try {
                            const updateResponse = await fetch('/api/update-dp', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ plongeeId: plongeeId, nomDP: plongeur.id })
                            });

                            if (!updateResponse.ok) throw new Error(`Erreur serveur (${updateResponse.status})`);

                            const updateData = await updateResponse.json();
                            console.log("‚úÖ Plong√©e mise √† jour avec le DP :", updateData);
                            window.location.reload();
                        } catch (error) {
                            console.error("‚ùå Erreur lors de la mise √† jour de la plong√©e :", error);
                            alert("Erreur lors de la mise √† jour du DP de la plong√©e.");
                        }
                    });

                    dpList.appendChild(div);
                });

                document.getElementById('dp-modal').classList.remove('hidden');
            } catch (error) {
                console.error("‚ùå Erreur lors de la r√©cup√©ration des plongeurs :", error);
                alert("Erreur lors de la r√©cup√©ration des plongeurs.");
            }
        }

        async function getDpInfos(nomdp) {
            if (!nomdp) return { nom: "Inconnu", niveau: "?" };

            try {
                const response = await fetch(`/api/plongeur/${nomdp}`);
                if (!response.ok) throw new Error(`Erreur serveur (${response.status})`);
                const data = await response.json();
                return { nom: data.nom || "Inconnu", niveau: data.niveau || "?" };
            } catch (error) {
                console.error("‚ùå Erreur lors de la r√©cup√©ration du plongeur :", error);
                return { nom: "Inconnu", niveau: "?" };
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const pathSegments = window.location.pathname.split("/");
            const sortieId = pathSegments[2];
            const sortieDate = document.getElementById("selected-date").getAttribute("data-date");

            if (!sortieId || sortieId.length !== 36) {
                console.error("‚ùå Erreur : sortie_id invalide !");
                alert("Erreur : Aucun ID de sortie valide trouv√©.");
                return;
            }

            const ajouterPlongeeBtn = document.getElementById("ajouter-plongee");
            if (ajouterPlongeeBtn) {
                ajouterPlongeeBtn.addEventListener("click", async () => {
                    try {
                        const response = await fetch("/api/ajouter-plongee", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ sortie_id: sortieId, date: sortieDate })
                        });

                        if (!response.ok) throw new Error(`Erreur serveur (${response.status})`);

                        const data = await response.json();
                        console.log("‚úÖ R√©ponse serveur :", data);
                        chargerPlongees();
                    } catch (error) {
                        console.error("‚ùå Erreur lors de l'ajout :", error);
                        alert("Erreur lors de l'ajout de la plong√©e");
                    }
                });
            }

            document.getElementById('close-modal').addEventListener('click', function () {
                document.getElementById('dp-modal').classList.add('hidden');
            });

            chargerPlongees();
        });
    </script>
</body>
</html>