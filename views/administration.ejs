<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Administration - Palanquee Pro</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#2A70E0',
                        secondary: '#38B2AC',
                        accent: '#ED8936',
                        dark: '#1A202C',
                        'dark-light': '#2D3748'
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif']
                    }
                }
            }
        };
    </script>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <!-- Fichier CSS externe -->
    <link rel="stylesheet" href="/style.css">
</head>

<body class="bg-gradient-dark text-white font-sans min-h-screen p-6">

    <!-- Header avec logo et titre -->
    <header class="relative flex items-center justify-center mb-8 py-4">
        <!-- Logo + Titre (maintenant centré) -->
        <div class="flex items-center space-x-3 order-1 sm:order-none">
            <div class="bg-primary-dark p-3 rounded-xl shadow-lg">
                <i class="fas fa-water text-2xl text-primary-light"></i>
            </div>
            <h1 class="text-3xl font-bold text-center">
                <a href="/" class="relative group">
                    <span class="logo-text relative">
                        Palanquee
                        <span
                            class="absolute bottom-0 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full"></span>
                    </span>
                    <span class="text-gray-300">Pro</span>
                </a>
            </h1>
        </div>

        <!-- Bouton Déconnexion (position absolue à droite) -->
        <nav class="order-2 sm:order-none sm:absolute sm:right-0">
            <form action="/logout" method="POST" class="relative group">
                <button type="submit"
                    class="flex items-center gap-2 px-3 py-1.5 text-red-600 font-medium rounded-md transition-all duration-200 hover:bg-red-50 border border-red-200 hover:border-red-300">
                    <i class="fas fa-sign-out-alt text-sm opacity-80"></i>
                    <span class="text-sm">Déco</span>
                </button>
                <div
                    class="absolute bottom-0 left-1/2 h-px bg-red-400 transform -translate-x-1/2 scale-x-0 group-hover:scale-x-75 transition-transform duration-300 w-3/4">
                </div>
            </form>
        </nav>
    </header>

    <!-- Contenu principal -->
    <main class="w-full max-w-6xl mx-auto">
        <div class="bg-dark-light p-6 rounded-2xl shadow-lg border border-gray-700">
            <h2 class="text-2xl font-bold text-primary mb-6 border-b border-gray-700 pb-4">Gestion des membres</h2>

            <!-- Formulaire d'ajout -->
            <div class="mb-8 p-6 border border-gray-700 rounded-xl bg-dark">
                <h3 class="font-semibold text-lg mb-4 text-secondary">Ajouter un nouveau membre</h3>

                <form id="addMemberForm" class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                    <div>
                        <label class="block text-gray-400 mb-2">Prénom</label>
                        <input type="text" id="firstName" required
                            class="w-full px-3 py-2 bg-dark-light border border-gray-700 rounded-lg focus:ring-primary focus:outline-none">
                    </div>

                    <div>
                        <label class="block text-gray-400 mb-2">Nom</label>
                        <input type="text" id="lastName" required
                            class="w-full px-3 py-2 bg-dark-light border border-gray-700 rounded-lg focus:ring-primary focus:outline-none">
                    </div>

                    <div class="md:col-span-2">
                        <label class="block text-gray-400 mb-2">Email</label>
                        <input type="email" id="email" required
                            class="w-full px-3 py-2 bg-dark-light border border-gray-700 rounded-lg focus:ring-primary focus:outline-none">
                    </div>

                    <div>
                        <label class="block text-gray-400 mb-2">Rôle</label>
                        <select id="role"
                            class="w-full px-3 py-2 bg-dark-light border border-gray-700 rounded-lg focus:ring-primary focus:outline-none">
                            <option value="member">Membre</option>
                            <option value="admin">Administrateur</option>
                        </select>
                    </div>

                    <div class="flex items-end md:col-span-2">
                        <button type="submit"
                            class="bg-primary hover:bg-blue-600 text-white px-6 py-2 rounded-lg font-medium shadow-md transition w-full md:w-auto">
                            <i class="fas fa-user-plus mr-2"></i>Ajouter le membre
                        </button>
                    </div>
                </form>
            </div>

            <!-- Liste des membres -->
            <div class="overflow-x-auto rounded-xl border border-gray-700" style="max-width: 100vw; margin-left: -1rem; margin-right: -1rem;">
                <table class="min-w-full bg-dark-light">
                    <thead class="bg-dark">
                        <tr>
                            <th class="py-3 px-2 sm:px-4 border-b border-gray-700 text-left text-gray-300">Nom</th>
                            <th class="py-3 px-2 sm:px-4 border-b border-gray-700 text-left text-gray-300 hidden sm:table-cell">Email</th>
                            <th class="py-3 px-2 sm:px-4 border-b border-gray-700 text-left text-gray-300">Rôle</th>
                            <th class="py-3 px-2 sm:px-4 border-b border-gray-700 text-center text-gray-300">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="membersList" class="divide-y divide-gray-700">
                        <!-- JS générera le contenu -->
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <!-- Scripts -->
    <script>
        document.getElementById('addMemberForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;

            try {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Création...';

                const memberData = {
                    first_name: document.getElementById('firstName').value,
                    last_name: document.getElementById('lastName').value,
                    email: document.getElementById('email').value,
                    role: document.getElementById('role').value
                };

                const response = await fetch('/api/members', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(memberData)
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.details || error.message);
                }

                // Afficher notification avec le mot de passe
                showNotification(
                    'success',
                    'Membre créé avec succès',
                    `Le membre peut se connecter avec le mot de passe temporaire: <strong>clubplongee123</strong>`
                );

                // Recharger la liste et réinitialiser le formulaire
                await loadMembers();
                e.target.reset();

            } catch (error) {
                showNotification('error', 'Erreur', error.message);
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        });

        // Fonction helper pour les notifications
        function showNotification(type, title, message) {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg ${type === 'success' ? 'bg-green-500' : 'bg-red-500'
                } text-white max-w-md`;

            notification.innerHTML = `
        <div class="font-bold">${title}</div>
        <div class="text-sm">${message}</div>
    `;

            document.body.appendChild(notification);

            setTimeout(() => notification.remove(), 5000);
        }

        async function loadMembers() {
            const tableBody = document.getElementById('membersList');
            try {
                // Afficher un état de chargement
                tableBody.innerHTML = `
            <tr>
                <td colspan="4" class="py-4 text-center text-gray-400">
                    <i class="fas fa-spinner fa-spin mr-2"></i>Chargement...
                </td>
            </tr>
        `;

                const response = await fetch('/api/members');

                if (!response.ok) {
                    throw new Error(`Erreur ${response.status}: ${response.statusText}`);
                }

                const members = await response.json();

                if (!members || members.length === 0) {
                    tableBody.innerHTML = `
                <tr>
                    <td colspan="4" class="py-8 text-center text-gray-400">
                        <i class="fas fa-users-slash text-xl mb-2"></i>
                        <div>Aucun membre trouvé</div>
                    </td>
                </tr>
            `;
                    return;
                }

                tableBody.innerHTML = members.map(member => `
    <tr class="hover:bg-dark transition" id="member-${member.id}">
        <td class="py-3 px-2 sm:px-4 text-gray-200">
            <div class="font-medium">${member.first_name} ${member.last_name}</div>
            <div class="text-xs text-gray-400 sm:hidden">${member.email}</div>
        </td>
        <td class="py-3 px-4 text-gray-400 hidden sm:table-cell">${member.email}</td>
                <td class="py-3 px-4">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${member.role === 'admin' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
                    }">
                        ${member.role === 'admin' ? 'Administrateur' : 'Membre'}
                    </span>
                </td>
                <td class="py-3 px-4 text-center">
                    <button onclick="deleteMember('${member.id}')" 
                        class="text-red-400 hover:text-red-500 transition">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            </tr>
        `).join('');

            } catch (error) {
                console.error('Erreur:', error);
                tableBody.innerHTML = `
            <tr>
                <td colspan="4" class="py-8 text-center text-red-400">
                    <i class="fas fa-exclamation-triangle text-xl mb-2"></i>
                    <div>Erreur de chargement</div>
                    <div class="text-xs mt-2">${error.message}</div>
                </td>
            </tr>
        `;
            }
        }

        async function deleteMember(memberId) {
    if (!confirm("Êtes-vous sûr de vouloir supprimer ce membre ?")) {
        return;
    }

    try {
        // Changez l'URL pour inclure l'ID dans le path
        const response = await fetch(`/api/members/${memberId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            credentials: 'include' // Important pour les cookies
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Erreur serveur');
        }

        // Suppression de l'élément du DOM sans rechargement
        const row = document.getElementById(`member-${memberId}`);
        if (row) row.remove();
        
        alert('Membre supprimé avec succès');
    } catch (error) {
        console.error('Erreur:', error);
        alert('Erreur lors de la suppression: ' + error.message);
    }
}

        
        function showSuccessNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded';
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }

        function showErrorNotification(title, message) {
            const notification = document.createElement('div');
            notification.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded max-w-xs';
            notification.innerHTML = `
        <strong>${title}</strong>
        <div class="text-sm">${message}</div>
    `;
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 5000);
        }

        // Charge les membres au chargement de la page
        document.addEventListener('DOMContentLoaded', loadMembers);
    </script>
</body>

</html>