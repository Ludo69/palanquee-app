<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Gestion des Palanquées | Palanquee Pro</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            light: '#5E9DFF',
                            DEFAULT: '#2A70E0',
                            dark: '#1A4A9C',
                        },
                        secondary: {
                            light: '#4FD1C5',
                            DEFAULT: '#38B2AC',
                            dark: '#2C7A7B',
                        },
                        accent: {
                            light: '#F6AD55',
                            DEFAULT: '#ED8936',
                            dark: '#DD6B20',
                        },
                        dark: {
                            light: '#2D3748',
                            DEFAULT: '#1A202C',
                            dark: '#171923',
                        }
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                }
            }
        }
    </script>

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">



    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-gradient-to-b from-dark-dark to-dark-light text-white font-sans min-h-screen pb-16">

    <!-- Conteneur principal -->
    <div class="w-full max-w-5xl mx-auto p-4 sm:p-6 relative">
        <!-- Bouton de retour -->
        <button onclick="window.history.back()"
            class="absolute top-6 left-6 text-gray-300 hover:text-white transition-colors">
            <i class="fas fa-arrow-left text-xl"></i>
        </button>

        <!-- Titre -->
        <div class="text-center mb-8">
            <h1 class="text-2xl sm:text-3xl font-bold">
                <span
                    class="text-transparent bg-clip-text bg-gradient-to-r from-primary-light to-secondary-light">Gestion</span>
                <span class="text-gray-300">des Palanquées</span>
            </h1>
        </div>

        <!-- Liste des Palanquées -->
        <div id="palanqueesContainer" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6"></div>

        <!-- Plongeurs disponibles -->
        <div class="bg-dark-light rounded-2xl p-4 shadow-lg border border-gray-700 mb-6">
            <h2 class="text-lg font-semibold mb-3 text-gray-300">
                <i class="fas fa-users mr-2"></i> Plongeurs Disponibles
            </h2>
            <div id="plongeursContainer"
                class="flex flex-wrap gap-2 p-2 bg-dark rounded-lg max-h-40 overflow-y-auto no-scrollbar"></div>
        </div>

        <!-- Boutons d'action -->
        <div class="flex gap-4">
            <button id="ajouterPalanquee"
                class="flex-1 bg-gradient-to-r from-primary-light to-primary-dark hover:from-primary-dark hover:to-primary-light text-white py-3 rounded-lg font-medium transition-all">
                <i class="fas fa-plus mr-2"></i> Nouvelle Palanquée
            </button>
            <button id="genererPalanquees" class="flex-1 bg-gradient-to-r from-accent-light to-accent-dark hover:from-accent-dark hover:to-accent-light text-white py-3 rounded-lg font-medium transition-all <%= roleClasses.visibility %>">
                <i class="fas fa-random mr-2"></i> Générer Aléatoirement
            </button>
            <button id="validerPalanquees"
                class="flex-1 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-3 rounded-lg font-medium transition-all <%= roleClasses.visibility %>">
                <i class="fas fa-save mr-2"></i> Enregistrer
            </button>
        </div>
    </div>

    <!-- Bottom Navigation -->
    <nav
        class="fixed bottom-0 left-0 w-full bg-dark-light bg-opacity-90 backdrop-blur-md shadow-lg flex justify-around py-3 rounded-t-2xl border-t border-gray-700 z-40">
        <a href="/" class="nav-item text-gray-400 flex flex-col items-center">
            <i class="fas fa-home text-lg"></i>
            <span class="text-xs mt-1">Accueil</span>
        </a>
        <a href="/gestion-plongeurs" class="nav-item text-gray-400 flex flex-col items-center">
            <i class="fas fa-user-group text-lg"></i>
            <span class="text-xs mt-1">Plongeurs</span>
        </a>
        <a href="/gestion-sorties" class="nav-item text-gray-400 flex flex-col items-center">
            <i class="far fa-calendar-alt text-lg"></i>
            <span class="text-xs mt-1">Sorties</span>
        </a>
        <a href="/selection-sorties" class="nav-item active text-primary-light flex flex-col items-center">
            <i class="fas fa-layer-group text-lg"></i>
            <span class="text-xs mt-1">Palanquées</span>
        </a>
    </nav>

    <div id="modalSecurite" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-dark-light rounded-lg p-6 max-w-md mx-4">
            <h3 class="text-xl font-bold mb-4 text-accent-light">
                <i class="fas fa-exclamation-triangle mr-2"></i> Vérification requise
            </h3>
            <p class="mb-4">
                Le <span class="font-bold">Directeur de Plongée (DP)</span> doit impérativement :
            </p>
            <ul class="list-disc pl-5 mb-4 space-y-2">
                <li>Vérifier la conformité des palanquées générées</li>
                <li>S'assurer que tous les critères de sécurité sont respectés</li>
                <li>Adapter les groupes aux niveaux des plongeurs</li>
            </ul>
            <div class="flex justify-end space-x-3">
                <button id="modalCancel" class="px-4 py-2 rounded bg-gray-600 hover:bg-gray-700">
                    Annuler
                </button>
                <button id="modalConfirm" class="px-4 py-2 rounded bg-accent-light hover:bg-accent-dark">
                    Confirmer
                </button>
            </div>
        </div>
    </div>

    <script>
        function getPlongeeIdFromURL() {
            const params = new URLSearchParams(window.location.search);
            return params.get("id");
        }

        const PLONGEE_ID = getPlongeeIdFromURL();

        if (!PLONGEE_ID) {
            console.error("⚠️ Aucun ID de plongée trouvé dans l'URL !");
        }

        document.addEventListener("DOMContentLoaded", async function () {
            // Récupération des éléments de la modale
            const modal = document.getElementById('modalSecurite');
            const confirmBtn = document.getElementById('modalConfirm');
            const cancelBtn = document.getElementById('modalCancel');
            const genererBtn = document.getElementById('genererPalanquees');

            // Gestion de la modale
            genererBtn.addEventListener('click', async (e) => {
                e.preventDefault();
                
                if (!sessionStorage.getItem('modalSeen')) {
                    modal.classList.remove('hidden');
                    sessionStorage.setItem('modalSeen', 'true');
                } else {
                    await executerGeneration();
                }
            });

            cancelBtn.addEventListener('click', () => {
                modal.classList.add('hidden');
            });

            confirmBtn.addEventListener('click', async () => {
                modal.classList.add('hidden');
                await executerGeneration();
            });

            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.add('hidden');
                }
            });

            async function executerGeneration() {
                genererBtn.disabled = true;
                genererBtn.classList.add('opacity-50', 'cursor-not-allowed');
                try {
                    await genererPalanqueesAleatoires();
                } finally {
                    genererBtn.disabled = false;
                    genererBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                }
            }

            const palanqueesContainer = document.getElementById("palanqueesContainer");
            const plongeursContainer = document.getElementById("plongeursContainer");
            const ajouterPalanqueeBtn = document.getElementById("ajouterPalanquee");

            const animauxMarins = ["Calmar", "Pieuvre", "Dauphin", "Requin", "Tortue", "Méduse", "Raie aigle", "Barracuda", "Crevette", "Hippocampe", "Raie Manta", "Perroquet", "Poisson-clown", "Phoque", "Langouste", "Anguille", "Carpe", "Gorgone", "Huitre", "Marsouin", "Orque", "Poulpe", "Rascasse", "Baleine", "Sardine", "Dugong", "Lamentin", "Longimanus", "Murène", "Congre", "Baliste", "Carangue", "Poisson-ange", "Chirurgien", "Mérou", "Papillon", "Napoléon", "Dorade", "Diodon", "Tétrodon", "Flûte", "Girelle", "Cocher", "Pastenague", "Anguille", "Empereur", "Vivaneau", "Nason à épron", "Platax", "Crocodile", "Pierre", "Rouget barbé", "Blennie"];
            let nomsUtilises = [];
            let palanquees = [];
            let plongeursRestants = [];

            // Fonctions utilitaires
            function estGuide(niveau) {
                return ['GP', 'E2', 'E3', 'E4', 'PE40'].includes(niveau);
            }

            function extraireNiveau(textePlongeur) {
                const match = textePlongeur.match(/(?:\(| - )(N\d|PE\d+|E\d|GP)(?:\)|$)/);
                return match ? match[1] : null;
            }

            function formaterAffichagePlongeur(nom, niveau) {
                return `${nom} (${niveau})`;
            }

            // Fonction pour nettoyer toutes les palanquées existantes
            async function nettoyerPalanquees() {
                // Récupérer toutes les palanquées existantes
                const palanqueesExistantes = document.querySelectorAll(".palanquee-container");
                
                // Pour chaque palanquée
                for (const palanquee of palanqueesExistantes) {
                    const id = palanquee.dataset.id;
                    const palanqueeBody = palanquee.querySelector(".palanquee-body");
                    
                    // Déplacer tous les plongeurs vers le conteneur disponible
                    while (palanqueeBody?.firstChild) {
                        plongeursContainer.appendChild(palanqueeBody.firstChild);
                    }
                    
                    // Supprimer la palanquée
                    palanquee.remove();
                    
                    // Si c'est une palanquée enregistrée (UUID), la supprimer du serveur
                    if (estUUID(id)) {
                        try {
                            await fetch(`/supprimer_palanquee/${id}`, {
                                method: "DELETE",
                            });
                        } catch (error) {
                            console.error("Erreur lors de la suppression de la palanquée:", error);
                        }
                    }
                }
                
                // Réinitialiser les variables
                palanquees = [];
                nomsUtilises = [];
                
                // Rendre les plongeurs à nouveau draggables
                setTimeout(rendrePlongeursDraggables, 100);
            }

            // Fonction pour charger les données
            async function chargerDonnees() {
                try {
                    const response = await fetch(`/get_palanquees/${PLONGEE_ID}`);
                    const result = await response.json();

                    if (response.ok) {
                        palanquees = result.palanquees;
                        plongeursRestants = result.plongeurs;
                        afficherPalanquees();
                        afficherPlongeursDisponibles();
                    } else {
                        console.error("Erreur lors du chargement des données :", result.error);
                    }
                } catch (error) {
                    console.error("Erreur lors du chargement des données :", error);
                }
            }

            function genererNomPalanquee() {
                if (nomsUtilises.length >= animauxMarins.length) {
                    throw new Error("Tous les noms d'animaux marins ont été utilisés.");
                }

                let nom;
                do {
                    nom = animauxMarins[Math.floor(Math.random() * animauxMarins.length)];
                } while (nomsUtilises.includes(nom));

                nomsUtilises.push(nom);
                return nom;
            }

            // Fonction pour valider les palanquées avant enregistrement
            function validerPalanquees() {
                const erreurs = [];
                let isValid = true;

                document.querySelectorAll(".palanquee-body").forEach(palanqueeBody => {
                    // Récupération DIRECTE du nom depuis le conteneur parent
                    const container = palanqueeBody.closest(".palanquee-container");
                    const nom = container?.dataset.nom;             
                    const plongeurs = [...palanqueeBody.querySelectorAll(".plongeur")];
                    const niveaux = plongeurs.map(p => extraireNiveau(p.textContent));
                    const n1Count = niveaux.filter(n => n === 'N1').length;
                    const hasGuide = niveaux.some(estGuide);


                    // Règle 1: Si N1 présent
                    if (n1Count > 0) {
                        if (!hasGuide) {
                            erreurs.push(`"${nom}": ${n1Count} N1 détecté(s) - Guide obligatoire`);
                            isValid = false;
                        }
                    }

                    // Règle 2: Nombre de plongeurs
                    if (hasGuide) {
                        if (plongeurs.length > 5) {
                            erreurs.push(`"${nom}": Maximum 5 plongeurs avec guide`);
                            isValid = false;
                        }
                    } else {
                        if (plongeurs.length < 2 || plongeurs.length > 3) {
                            erreurs.push(`"${nom}": Une palanquée sans guide doit être composé de 2 à 3 plongeurs`);
                            isValid = false;
                        }
                    }
                });

                return { isValid, erreurs };
            }

            function afficherPalanquee(id, nom, palanqueesPlongeurs = []) {
                const div = document.createElement("div");
                div.className = "bg-gray-900 p-4 rounded-lg shadow-md space-y-2 palanquee-container";
                div.dataset.id = id;
                div.dataset.nom = nom; // Stockage DIRECT du nom

                div.innerHTML = `
                    <div class="flex justify-between items-center">
                        <span class="text-lg font-semibold text-white">${nom}</span>
                        <button class="delete-palanquee text-red-500 hover:text-red-700 text-lg <%= roleClasses.visibility %>">❌</button>
                    </div>
                    <div class="palanquee-body bg-gray-700 p-3 rounded-md min-h-[60px]" data-id="${id}"></div>
                    `;


                const palanqueeBody = div.querySelector(".palanquee-body");

                palanqueeBody.classList.add("flex", "flex-col", "gap-2", "p-2", "bg-gray-800", "rounded-lg");

                palanqueesPlongeurs.forEach(pp => {
                    const plongeurData = pp.plongeurs || {};
                    const nomPlongeur = plongeurData.nom || "Nom inconnu";
                    const niveau = pp.niveau_plongeur_historique || plongeurData.niveau || "Niveau inconnu";

                    const plongeurElement = document.createElement("div");
                    plongeurElement.classList.add(
                        "plongeur",
                        "px-4",
                        "py-2",
                        "bg-gray-700",
                        "rounded-lg",
                        "shadow-md",
                        "text-sm",
                        "font-semibold",
                        "whitespace-nowrap",
                        "cursor-pointer",
                        "border",
                        "border-gray-600",
                        "hover:bg-gray-600",
                        "transition-colors"
                    );

                    // Coloration du texte selon le niveau
                    if (['GP', 'E2', 'E3', 'E4', 'PE40'].includes(niveau)) {
                        plongeurElement.classList.add('text-blue-400', 'border-blue-400/30');
                    } else if (niveau === 'N1') {
                        plongeurElement.classList.add('text-green-400', 'border-green-400/30');
                    } else {
                        plongeurElement.classList.add('text-yellow-400', 'border-yellow-400/30');
                    }

                    plongeurElement.dataset.id = pp.plongeur_id;
                    plongeurElement.setAttribute("draggable", "true");
                    plongeurElement.textContent = `${nomPlongeur} (${niveau})`;

                    // Drag and drop
                    plongeurElement.addEventListener("dragstart", (e) => {
                        e.dataTransfer.setData("text/plain", pp.plongeur_id);
                        plongeurElement.classList.add("opacity-50", "border-white");
                    });

                    plongeurElement.addEventListener("dragend", () => {
                        plongeurElement.classList.remove("opacity-50", "border-white");
                    });

                    palanqueeBody.appendChild(plongeurElement);
                });


                // Gestion de la suppression
                div.querySelector(".delete-palanquee").addEventListener("click", () => supprimerPalanquee(id));

                // Zone de dépôt
                palanqueeBody.addEventListener("dragover", (e) => {
                    e.preventDefault();
                    e.dataTransfer.dropEffect = "move";
                });

                palanqueeBody.addEventListener("drop", (e) => {
                    e.preventDefault();
                    const plongeurId = e.dataTransfer.getData("text/plain");
                    const plongeur = document.querySelector(`[data-id='${plongeurId}']`);
                    if (plongeur) palanqueeBody.appendChild(plongeur);
                });

                palanqueesContainer.appendChild(div);
            }

            function afficherPalanquees() {
                palanqueesContainer.innerHTML = '';
                palanquees.forEach(({ id, nom, palanquees_plongeurs }) => {
                    afficherPalanquee(id, nom, palanquees_plongeurs || []);
                });
            }

            function afficherPlongeursDisponibles() {
                plongeursContainer.innerHTML = '';
                plongeursRestants.forEach(plongeur => {
                    // Structure différente ici : les données sont directement dans l'objet
                    const nom = plongeur.nom || "Nom inconnu";
                    const niveau = plongeur.niveau || "Niveau inconnu";

                    const div = document.createElement("div");
                    div.classList.add("plongeur",
                        "px-4",
                        "py-2",
                        "bg-gray-700",
                        "rounded-lg",
                        "shadow-md",
                        "text-sm",
                        "font-semibold",
                        "whitespace-nowrap",
                        "cursor-pointer",
                        "border",
                        "border-gray-600",
                        "hover:bg-gray-600",
                        "transition-colors");

                    if (['GP', 'E2', 'E3', 'E4', 'PE40'].includes(niveau)) {
                        div.classList.add('text-blue-400');
                    } else if (niveau === 'N1') {
                        div.classList.add('text-green-400');
                    } else {
                        div.classList.add('text-yellow-400');
                    }

                    div.dataset.id = plongeur.id;
                    div.draggable = true;
                    div.textContent = `${nom} (${niveau})`;
                    plongeursContainer.appendChild(div);
                });
                rendrePlongeursDraggables();
            }

            function rendrePlongeursDraggables() {
                document.querySelectorAll(".plongeur").forEach(plongeur => {
                    plongeur.setAttribute("draggable", "true");
                    plongeur.addEventListener("dragstart", (e) => {
                        e.dataTransfer.setData("text/plain", plongeur.dataset.id);
                        setTimeout(() => plongeur.classList.add("hidden"), 0);
                    });
                    plongeur.addEventListener("dragend", () => {
                        plongeur.classList.remove("hidden");
                    });
                });
            }

            function estUUID(valeur) {
                const regexUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
                return regexUUID.test(valeur);
            }

            async function supprimerPalanquee(id) {
                const palanqueeDiv = document.querySelector(`[data-id="${id}"]`);
                if (!palanqueeDiv) return;

                const palanqueeBody = palanqueeDiv.querySelector(".palanquee-body");
                while (palanqueeBody?.firstChild) {
                    plongeursContainer.appendChild(palanqueeBody.firstChild);
                }

                palanqueeDiv.remove();
                palanquees = palanquees.filter(p => p.id !== id);

                if (estUUID(id)) {
                    try {
                        const response = await fetch(`/supprimer_palanquee/${id}`, {
                            method: "DELETE",
                        });
                        if (!response.ok) {
                            const result = await response.json();
                            console.error("Erreur suppression:", result.error);
                        }
                    } catch (error) {
                        console.error("Erreur lors de la suppression :", error);
                    }
                }

                setTimeout(rendrePlongeursDraggables, 100);
            }

            // Gestion de l'enregistrement
            document.getElementById("validerPalanquees").addEventListener("click", async () => {
                if (!PLONGEE_ID) {
                    alert("ID de plongée manquant !");
                    return;
                }

                // Validation métier
                const validation = validerPalanquees();
                if (!validation.isValid) {
                    alert(validation.erreurs.join("\n"));
                    return;
                }

                // Préparation des données

                const palanqueesData = [];

                document.querySelectorAll(".palanquee-body").forEach((palanqueeBody) => {
                    const container = palanqueeBody.closest(".palanquee-container");  // Trouver le conteneur de la palanquée
                    const nom = container?.dataset.nom;  // Récupérer le nom de la palanquée à partir du dataset du conteneur

                    const id = palanqueeBody.dataset.id;  // Récupérer l'ID de la palanquée
                    const plongeurs = [...palanqueeBody.querySelectorAll(".plongeur")].map(p => p.dataset.id);  // Récupérer les plongeurs

                    if (plongeurs.length > 0) {
                        palanqueesData.push({
                            id,
                            nom,  // Utiliser le nom récupéré ici
                            plongeurs,
                            profondeur: 0,  // À adapter selon tes besoins
                            duree: 0,       // À adapter selon tes besoins
                            paliers: ""     // À adapter selon tes besoins
                        });
                    }
                });

                if (palanqueesData.length === 0) {
                    alert("Aucune palanquée valide à enregistrer !");
                    return;
                }

                // Envoi des données

                try {
                    const palanqueesDataFormatted = palanqueesData.map(p => {
                        return {
                            plongee_id: PLONGEE_ID,
                            id: isTemporaryId(p.id) ? null : p.id,
                            nom: p.nom || "Nom inconnu", // 🔥 Sécurise la valeur du nom
                            profondeur: p.profondeur || 0,
                            duree: p.duree || 0,
                            paliers: p.paliers || "",
                            plongeurs: p.plongeurs
                        };
                    });
                    const response = await fetch("/enregistrer_palanquee", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(palanqueesDataFormatted)
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || "Erreur serveur");
                    }

                    alert("Palanquées enregistrées avec succès !");
                    setTimeout(chargerDonnees, 500);
                } catch (error) {
                    console.error("Erreur:", error);
                    alert(`Échec de l'enregistrement: ${error.message}`);
                }
            });

            function isTemporaryId(id) {
                return id && String(id).length >= 13 && !isNaN(Number(id));
            }

            // Initialisation
            ajouterPalanqueeBtn.addEventListener("click", () => {
                const id = Date.now();
                const nom = genererNomPalanquee();
                palanquees.push({ id, nom, plongeurs: [] });
                afficherPalanquee(id, nom);
            });

            plongeursContainer.addEventListener("dragover", (e) => {
                e.preventDefault();
                e.dataTransfer.dropEffect = "move";
            });

            plongeursContainer.addEventListener("drop", (e) => {
                e.preventDefault();
                const plongeurId = e.dataTransfer.getData("text/plain");
                const plongeur = document.querySelector(`[data-id='${plongeurId}']`);
                if (plongeur) plongeursContainer.appendChild(plongeur);
            });

            // Fonction pour générer des palanquées aléatoires optimisées
            async function genererPalanqueesAleatoires() {
                // D'abord, nettoyer toutes les palanquées existantes
                await nettoyerPalanquees();

                // Récupérer tous les plongeurs disponibles
                const plongeurs = Array.from(plongeursContainer.querySelectorAll(".plongeur"));
                if (plongeurs.length === 0) {
                    alert("Aucun plongeur disponible pour générer des palanquées !");
                    return;
                }

                // Trier les plongeurs par niveau
                const guides = plongeurs.filter(p => estGuide(extraireNiveau(p.textContent)));
                const n1 = plongeurs.filter(p => extraireNiveau(p.textContent) === 'N1');
                const autres = plongeurs.filter(p => !estGuide(extraireNiveau(p.textContent)) && extraireNiveau(p.textContent) !== 'N1');

                // Mélanger les tableaux
                const melangerTableau = (array) => {
                    for (let i = array.length - 1; i > 0; i--) {
                        const j = Math.floor(Math.random() * (i + 1));
                        [array[i], array[j]] = [array[j], array[i]];
                    }
                    return array;
                };

                melangerTableau(guides);
                melangerTableau(n1);
                melangerTableau(autres);

                // Calculer le nombre optimal de N1 par guide
                const nombreOptimalN1ParGuide = Math.ceil(n1.length / guides.length);
                const maxN1ParGuide = Math.min(4, nombreOptimalN1ParGuide);

                // Créer des palanquées avec N1 de manière équilibrée
                while (n1.length > 0 && guides.length > 0) {
                    const id = Date.now() + Math.random();
                    const nom = genererNomPalanquee();
                    
                    // Calculer le nombre de N1 pour cette palanquée
                    const n1RestantsOptimal = Math.min(
                        maxN1ParGuide,
                        Math.ceil(n1.length / guides.length)
                    );
                    
                    const n1Count = Math.min(n1RestantsOptimal, n1.length);
                    const n1Plongeurs = n1.splice(0, n1Count);
                    const guide = guides.pop();
                    
                    afficherPalanquee(id, nom);
                    const palanqueeBody = document.querySelector(`[data-id="${id}"] .palanquee-body`);
                    palanqueeBody.appendChild(guide);
                    n1Plongeurs.forEach(p => palanqueeBody.appendChild(p));
                }

                // Créer des palanquées autonomes avec les plongeurs restants
                const plongeursRestants = [...guides, ...autres];
                melangerTableau(plongeursRestants);

                while (plongeursRestants.length >= 2) {
                    const id = Date.now() + Math.random();
                    const nom = genererNomPalanquee();
                    const taillePalanquee = Math.min(2, plongeursRestants.length);
                    
                    afficherPalanquee(id, nom);
                    const palanqueeBody = document.querySelector(`[data-id="${id}"] .palanquee-body`);
                    
                    for (let i = 0; i < taillePalanquee; i++) {
                        const plongeur = plongeursRestants.pop();
                        palanqueeBody.appendChild(plongeur);
                    }
                }

                // Remettre les plongeurs non utilisés dans le conteneur disponible
                plongeursRestants.forEach(p => plongeursContainer.appendChild(p));
                rendrePlongeursDraggables();
            }

            // Ajouter l'écouteur d'événement pour le bouton de génération aléatoire
            //document.getElementById("genererPalanquees").addEventListener("click", genererPalanqueesAleatoires);

            await chargerDonnees();
        });
    </script>
    <!-- IndexedDB and App Scripts -->
    <!--<script src="/js/indexeddb.js"></script>
    <script src="/js/client.js"></script>-->
</body>

</html>