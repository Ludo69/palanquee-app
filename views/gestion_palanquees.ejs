<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Palanquées</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white flex flex-col items-center justify-center min-h-screen px-4">

    <div class="w-full max-w-4xl p-6">
        <h1 class="text-3xl font-bold mb-4 text-center text-white">Gestion des Palanquées</h1>

        <!-- Liste des Palanquées (Grille en 2 colonnes) -->
        <div id="palanqueesContainer" class="grid grid-cols-1 md:grid-cols-2 gap-4"></div>

        <!-- Liste des plongeurs disponibles -->
        <h2 class="text-xl font-semibold mt-6 mb-2 text-white">Plongeurs Disponibles</h2>
        <div id="plongeursContainer" class="flex space-x-2 overflow-x-auto p-2 bg-gray-800 rounded-lg shadow-md"></div>

        <!-- Boutons d'action -->
        <div class="mt-6 flex justify-between">
            <button id="ajouterPalanquee" class="w-1/2 bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 rounded-lg shadow-md transition duration-300">
                + Palanquée
            </button>
            <button id="validerPalanquees" class="w-1/2 ml-2 bg-green-500 hover:bg-green-600 text-white font-semibold py-3 rounded-lg shadow-md transition duration-300">
                💾 Enregistrer / Mettre à jour
            </button>
        </div>
    </div>

    <!-- Bottom Navigation -->
    <div class="fixed bottom-0 left-0 w-full bg-gray-800 bg-opacity-80 backdrop-blur-md shadow-lg flex justify-around py-3 rounded-t-2xl">
        <a href="/" class="text-gray-400 hover:text-blue-400 flex flex-col items-center">
            <i class="fas fa-home text-xl"></i>
            <span class="text-xs">🏠 Accueil</span>
        </a>
        <a href="/gestion-plongeurs" class="text-gray-400 hover:text-green-400 flex flex-col items-center">
            <i class="fas fa-users text-xl"></i>
            <span class="text-xs">👤 Plongeurs</span>
        </a>
        <a href="/gestion-sorties" class="text-gray-400 hover:text-yellow-400 flex flex-col items-center">
            <i class="far fa-calendar-alt text-xl"></i>
            <span class="text-xs">🤿 Sorties</span>
        </a>
        <a href="/selection-sorties" class="text-gray-400 hover:text-orange-400 flex flex-col items-center">
            <i class="fas fa-mask text-xl"></i>
            <span class="text-xs">📋 Palanquées</span>
        </a>
    </div>

    <script>
        function getPlongeeIdFromURL() {
            const params = new URLSearchParams(window.location.search);
            return params.get("id");
        }

        const PLONGEE_ID = getPlongeeIdFromURL();

        if (!PLONGEE_ID) {
            console.error("⚠️ Aucun ID de plongée trouvé dans l'URL !");
        }

        document.addEventListener("DOMContentLoaded", async function () {
            const palanqueesContainer = document.getElementById("palanqueesContainer");
            const plongeursContainer = document.getElementById("plongeursContainer");
            const ajouterPalanqueeBtn = document.getElementById("ajouterPalanquee");

            const animauxMarins = ["Calmar géant","Pieuvre", "Dauphin", "Requin", "Tortue", "Méduse", "Raie aigle", "Corail", "Calmar", "Barracuda", "Crevette", "Hippocampe", "Raie Manta", "Perroquet", "Poisson-clown", "Phoque", "Langouste", "Anguille", "Carpe", "Gorgone", "Maquereau", "Huitre", "Marsouin", "Orque", "Poulpe", "Rascasse", "Requin-baleine", "Sardine"];
            let nomsUtilises = [];
            let palanquees = [];
            let plongeursRestants = [];

            // Fonction pour charger les palanquées et les plongeurs depuis Supabase
            async function chargerDonnees() {
    try {
        const response = await fetch(`/get_palanquees/${PLONGEE_ID}`);
        const result = await response.json();

        if (response.ok) {
            palanquees = result.palanquees;
            plongeursRestants = result.plongeurs;

            afficherPalanquees();
            afficherPlongeursDisponibles();

            // 🔥 Ajout : afficher les plongeurs pour chaque palanquée
            palanquees.forEach(palanquee => {
                if (palanquee.palanquees_plongeurs) {
                    palanquee.palanquees_plongeurs.forEach(pp => {
                    });
                } else {
                    console.log("⚠️ Aucune donnée sur les plongeurs.");
                }
            });

        } else {
            console.error("Erreur lors du chargement des données :", result.error);
        }
    } catch (error) {
        console.error("Erreur lors du chargement des données :", error);
    }
}


            function genererNomPalanquee() {
                if (nomsUtilises.length >= animauxMarins.length) {
                    throw new Error("Tous les noms d'animaux marins ont été utilisés.");
                }

                let nom;
                do {
                    nom = animauxMarins[Math.floor(Math.random() * animauxMarins.length)];
                } while (nomsUtilises.includes(nom));

                nomsUtilises.push(nom);
                return nom;
            }

            ajouterPalanqueeBtn.addEventListener("click", function () {
                const id = Date.now();
                const nom = genererNomPalanquee();
                palanquees.push({ id, nom, plongeurs: [] });
                afficherPalanquee(id, nom);
            });

            function rendrePlongeursDraggables() {
                document.querySelectorAll(".plongeur").forEach(plongeur => {
                    plongeur.setAttribute("draggable", "true");
                    plongeur.addEventListener("dragstart", (event) => {
                        event.dataTransfer.setData("text/plain", plongeur.dataset.id);
                        setTimeout(() => plongeur.classList.add("hidden"), 0);
                    });
                    plongeur.addEventListener("dragend", () => {
                        plongeur.classList.remove("hidden");
                    });
                });
            }

            function afficherPalanquee(id, nom, plongeurs = []) {
                const div = document.createElement("div");
                div.classList.add("bg-gray-800", "p-4", "rounded-lg", "shadow-md", "space-y-2");
                div.dataset.id = id;
                div.innerHTML = `
                <div class="flex justify-between items-center">
                    <span class="text-lg font-semibold text-white">${nom}</span>
                    <button class="delete-palanquee text-red-500 hover:text-red-700 text-lg">❌</button>
                </div>
                <div class="palanquee-body bg-gray-700 p-3 rounded-md min-h-[60px]" data-id="${id}"></div>
                `;

                const palanqueeBody = div.querySelector(".palanquee-body");

                // Ajout des plongeurs déjà assignés
                plongeurs.forEach(pp => {
                    const plongeurElement = document.createElement("div");
                    plongeurElement.classList.add("plongeur", "px-4", "py-2", "bg-gray-700", "rounded-lg", "shadow", "text-sm", "font-semibold", "whitespace-nowrap", "cursor-pointer");
                    plongeurElement.classList.add((pp.plongeurs.niveau === 'N1' || pp.plongeurs.niveau === 'N2' || pp.plongeurs.niveau === 'N3') ? 'text-green-400' : 'text-blue-400');
                    plongeurElement.dataset.id = pp.plongeur_id;
                    plongeurElement.setAttribute("draggable", "true");
                    plongeurElement.textContent = `${pp.plongeurs.nom} (${pp.plongeurs.niveau})`;


                    // 🔥 Ajouter les événements drag and drop
                    plongeurElement.addEventListener("dragstart", (event) => {
                        event.dataTransfer.setData("text/plain", pp.plongeur_id);
                        plongeurElement.classList.add("opacity-50");
                    });

                    plongeurElement.addEventListener("dragend", () => {
                        plongeurElement.classList.remove("opacity-50");
                    });

                    palanqueeBody.appendChild(plongeurElement);
                });



                // Suppression de la palanquée
                div.querySelector(".delete-palanquee").addEventListener("click", function () {
                supprimerPalanquee(id);
                });

                // Permettre le drag and drop
                palanqueeBody.addEventListener("dragover", (event) => {
                event.preventDefault(); // Essentiel pour autoriser le dépôt !
                event.dataTransfer.dropEffect = "move";
                });

                palanqueeBody.addEventListener("drop", (event) => {
                event.preventDefault();
                const plongeurId = event.dataTransfer.getData("text/plain");
                const plongeur = document.querySelector(`[data-id='${plongeurId}']`);
                if (plongeur) {
                    palanqueeBody.appendChild(plongeur);
                }
                });

                palanqueesContainer.appendChild(div);
            }


            function afficherPalanquees() {
                palanqueesContainer.innerHTML = '';
                palanquees.forEach(({ id, nom, palanquees_plongeurs }) => {
                    // 🔥 Passer les plongeurs directement à afficherPalanquee
                    afficherPalanquee(id, nom, palanquees_plongeurs);
                });
            }


            function afficherPlongeursDisponibles() {
                plongeursContainer.innerHTML = '';
                plongeursRestants.forEach(plongeur => {
                    const div = document.createElement("div");
                    div.classList.add("plongeur", "px-4", "py-2", "bg-gray-700", "rounded-lg", "shadow", "text-sm", "font-semibold", "whitespace-nowrap", "cursor-pointer");
                    div.classList.add((plongeur.niveau === 'N1' || plongeur.niveau === 'N2' || plongeur.niveau === 'N3') ? 'text-green-400' : 'text-blue-400');
                    div.dataset.id = plongeur.id;
                    div.draggable = true;
                    div.innerText = `${plongeur.nom} - ${plongeur.niveau}`;
                    plongeursContainer.appendChild(div);
                });
                rendrePlongeursDraggables();
            }

            async function supprimerPalanquee(id) {
                const palanqueeDiv = document.querySelector(`[data-id="${id}"]`);
                const palanqueeBody = palanqueeDiv.querySelector(".palanquee-body");

                while (palanqueeBody.firstChild) {
                    plongeursContainer.appendChild(palanqueeBody.firstChild);
                }

                palanqueeDiv.remove();
                palanquees = palanquees.filter(p => p.id !== id);

                // 🛑 🔥 Envoi de la requête au backend pour supprimer la palanquée en base de données
                try {
                    const response = await fetch(`/supprimer_palanquee/${id}`, {
                        method: "DELETE",
                    });

                    const result = await response.json();
                    if (!response.ok) {
                        alert("❌ Erreur lors de la suppression : " + result.error);
                    }
                } catch (error) {
                    console.error("❌ Erreur lors de la suppression :", error);
                }

                setTimeout(() => {
                    rendrePlongeursDraggables();
                }, 100);
            }


            plongeursContainer.addEventListener("dragover", (event) => {
                event.preventDefault();
                event.dataTransfer.dropEffect = "move";
            });

            plongeursContainer.addEventListener("drop", (event) => {
                event.preventDefault();
                const plongeurId = event.dataTransfer.getData("text/plain");
                const plongeur = document.querySelector(`[data-id='${plongeurId}']`);
                if (plongeur) {
                    plongeursContainer.appendChild(plongeur);
                }
            });

            document.getElementById("validerPalanquees").addEventListener("click", async () => {
    console.log("On entre dans document validerPalanquees ");
    if (!PLONGEE_ID) {
        alert("Erreur : Impossible de récupérer l'ID de la plongée !");
        return;
    }

    const palanqueesData = [];

    document.querySelectorAll(".palanquee-body").forEach(palanquee => {
        // Récupération de l'ID de la palanquée
        const id = palanquee.dataset.id;
        
        // Récupération du conteneur parent pour accéder aux autres informations
        const palanqueeContainer = palanquee.closest(".bg-gray-800");
        
        // Récupération du nom
        const nomElement = palanqueeContainer?.querySelector("span");
        const nom = nomElement ? nomElement.textContent : "Nom inconnu";
        
        // Récupération des autres informations (profondeur, durée, paliers)
        const profondeurElement = palanqueeContainer?.querySelector("[data-profondeur]");
        const dureeElement = palanqueeContainer?.querySelector("[data-duree]");
        const paliersElement = palanqueeContainer?.querySelector("[data-paliers]");
        
        const profondeur = profondeurElement ? parseFloat(profondeurElement.dataset.profondeur || profondeurElement.textContent) : 0;
        const duree = dureeElement ? parseFloat(dureeElement.dataset.duree || dureeElement.textContent) : 0;
        const paliers = paliersElement ? paliersElement.dataset.paliers || paliersElement.textContent : "";
        
        // Récupération des plongeurs
        const plongeurs = [...palanquee.querySelectorAll("[data-id]")].map(p => p.dataset.id);

        if (plongeurs.length > 0) {
            palanqueesData.push({ 
                id, 
                nom, 
                profondeur, 
                duree, 
                paliers, 
                plongeurs 
            });
        }
    });

    if (palanqueesData.length === 0) {
        alert("Aucune palanquée à enregistrer !");
        return;
    }

    try {
        // Formatage des données des palanquées
        const palanqueesDataFormatted = palanqueesData.map(palanquee => {
            // Vérifier si l'ID est un ID temporaire généré par Date.now()
            // Ces IDs sont de grands nombres à 13 chiffres (timestamp en millisecondes)
            const idValue = palanquee.id;
            const isTemporaryId = idValue && String(idValue).length >= 13 && !isNaN(Number(idValue));
            
            // Si c'est un ID temporaire, on envoie null pour forcer la création d'une nouvelle palanquée
            // Sinon, on envoie l'ID tel quel (qui devrait être un ID valide de Supabase)
            return {
                plongee_id: PLONGEE_ID,
                id: isTemporaryId ? null : idValue,
                nom: palanquee.nom,
                profondeur: palanquee.profondeur || 0,
                duree: palanquee.duree || 0,
                paliers: palanquee.paliers || "",
                plongeurs: palanquee.plongeurs
            };
        });

        console.log("ID de la plongée envoyée à app.js : ", PLONGEE_ID);
        console.log("Données envoyées : ", palanqueesDataFormatted);
        
        const response = await fetch("/enregistrer_palanquee", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(palanqueesDataFormatted)
        });

        const result = await response.json();

        if (response.ok) {
            alert("Palanquées enregistrées avec succès !");
            // Ajout d'un délai avant de recharger pour s'assurer que les données sont bien enregistrées
            setTimeout(async () => {
                await chargerDonnees(); // Recharge les palanquées depuis la base après enregistrement
            }, 500);
        } else {
            alert("❌ Erreur : " + (result.error || "Erreur inconnue lors de l'enregistrement"));
            console.error("Détails de l'erreur:", result);
        }
    } catch (error) {
        console.error("❌ Erreur lors de l'enregistrement :", error);
        alert("❌ Erreur technique lors de l'enregistrement. Consultez la console pour plus de détails.");
    }
});

            await chargerDonnees();
        });
    </script>

</body>
</html>