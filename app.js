const express = require("express");
const bodyParser = require("body-parser");
const { createClient } = require("@supabase/supabase-js");
const PDFDocument = require("pdfkit");
const https = require("https");
const fs = require("fs");
const path = require("path");
const app = express();
const pdfDir = path.join(__dirname, "public", "pdf");
const nodemailer = require("nodemailer");


// V√©rifier si le dossier existe, sinon le cr√©er
if (!fs.existsSync(pdfDir)) {
    console.log("üìÇ Dossier 'public/pdf' inexistant, cr√©ation...");
    fs.mkdirSync(pdfDir, { recursive: true });
}

// Configuration de Supabase
const supabaseUrl = "https://xoiyziphxfkfxfawcafm.supabase.co";
const supabaseKey =
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhvaXl6aXBoeGZrZnhmYXdjYWZtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAwODQ3MTMsImV4cCI6MjA1NTY2MDcxM30.tY-3BgdAtSuv1ScGOgnimQEsLnk1mbnN9A2jYatsaNE";
const supabase = createClient(supabaseUrl, supabaseKey);

// Charger les variables d'environnement en fonction de l'environnement
if (process.env.NODE_ENV === 'production') {
    require('dotenv').config({ path: path.resolve(__dirname, '.env.production') });
} else {
    require('dotenv').config({ path: path.resolve(__dirname, '.env.development') });
}

// Charger les certificats SSL
const options = {
    key: fs.readFileSync(process.env.SSL_KEY_PATH),
    cert: fs.readFileSync(process.env.SSL_CERT_PATH)
};

const host = '0.0.0.0'; // Utiliser '0.0.0.0' pour √©couter sur toutes les interfaces
const port = process.env.PORT || 3000;

console.log('Variables d\'environnement au d√©marrage :', JSON.stringify(process.env, null, 2));
// V√©rifiez que les variables d'environnement sont bien charg√©es
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('SSL_KEY_PATH:', process.env.SSL_KEY_PATH);
console.log('SSL_CERT_PATH:', process.env.SSL_CERT_PATH);
console.log('HOST:', process.env.HOST);
console.log('PORT:', process.env.PORT);

// Middleware
app.use(bodyParser.json());
app.use((req, res, next) => {
    //console.log("Requ√™te re√ßue:", req.method, req.url);
    //console.log("Headers:", req.headers);
    //console.log("Body brut:", req.body);
    next();
});

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "public")));
app.use(express.static("public"));
app.set("view engine", "ejs");
app.set("views", __dirname + "/views");

// Routes
app.get("/", (req, res) => {
    res.render("index");
});

// PDF
app.get("/generate-pdf", async (req, res) => {
    const { plongeeId } = req.query;

    if (!plongeeId) {
        return res.status(400).json({ error: "L'ID de la plong√©e est requis." });
    }

    try {
        //console.log("üîç ID de la plong√©e re√ßu :", plongeeId);

        // R√©cup√©rer les infos de la plong√©e avec jointure pour obtenir le nom et niveau du DP
        const { data: plongee, error: plongeeError } = await supabase
            .from("plongees")
            .select("nomdp, date, site, plongeurs(niveau, nom), heure_debut")
            .eq("id", plongeeId)
            .single();

        if (plongeeError || !plongee) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration de la plong√©e :", plongeeError);
            throw new Error("Impossible de r√©cup√©rer les donn√©es de la plong√©e.");
        }

        //console.log("‚úÖ Donn√©es plong√©e r√©cup√©r√©es :", plongee);

        // R√©cup√©rer les palanqu√©es associ√©es √† cette plong√©e
        const { data: palanquees, error: palanqueesError } = await supabase
            .from("palanquees")
            .select("id, nom, profondeur, duree, paliers, prof_max, duree_max, type")
            .eq("plongee_id", plongeeId);

        if (palanqueesError) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration des palanqu√©es :", palanqueesError);
            throw new Error("Impossible de r√©cup√©rer les palanqu√©es.");
        }

        //console.log("‚úÖ Palanqu√©es r√©cup√©r√©es :", palanquees);

        // Formater la date en "jour mois ann√©e"
        const datePlongee = new Date(plongee.date);
        const options = { day: "numeric", month: "long", year: "numeric" };
        const dateFormatee = datePlongee.toLocaleDateString("fr-FR", options);
        // Formater l'heure en "HHhMM"
        let heureFormattee = "Heure inconnue";
        if (plongee.heure_debut) {
            const [heures, minutes] = plongee.heure_debut.split(":");
            heureFormattee = `${heures}h${minutes}`;
        }
        const dateEtHeure = `${dateFormatee} - ${heureFormattee}`;

        console.log("Date format√©e :", dateFormatee);
        console.log("Heure format√©e :", heureFormattee);


        // R√©cup√©rer les plongeurs pour chaque palanqu√©e
        for (let palanquee of palanquees) {
            const { data: palanqueesPlongeurs, error: plongeursError } = await supabase
                .from("palanquees_plongeurs")
                .select("plongeur_id, niveau_plongeur_historique")  // Ajoute niveau_historique ici
                .eq("palanquee_id", palanquee.id);
        
            if (plongeursError) {
                console.error("‚ùå Erreur lors de la r√©cup√©ration des plongeurs pour la palanqu√©e :", plongeursError);
                continue;
            }
        
            // R√©cup√©rer les informations des plongeurs (noms seulement)
            const plongeurIds = palanqueesPlongeurs.map(p => p.plongeur_id);
            if (plongeurIds.length > 0) {
                const { data: plongeurs, error: plongeursDataError } = await supabase
                    .from("plongeurs")
                    .select("id, nom")  // On ne prend plus le niveau actuel ici
                    .in("id", plongeurIds);
        
                if (plongeursDataError) {
                    console.error("‚ùå Erreur lors de la r√©cup√©ration des d√©tails des plongeurs :", plongeursDataError);
                    continue;
                }
        
                // Fusionner les donn√©es: nom du plongeur + niveau historique
                palanquee.plongeurs = plongeurs.map(plongeur => {
                    const correspondance = palanqueesPlongeurs.find(p => p.plongeur_id === plongeur.id);
                    return {
                        ...plongeur,
                        niveau: correspondance.niveau_plongeur_historique  // Utilise le niveau historique
                    };
                });
            }
        }

        // Construire les donn√©es du PDF
        const data = {
            nomDP: plongee.plongeurs.nom,
            qualificationDP: plongee.plongeurs.niveau,
            site: plongee.site || "Site inconnu",
            date: dateEtHeure,
            palanquees: palanquees || []
        };

        // Cr√©ation du document PDF
        // ‚úÖ Initialisation correcte de `datePlongeePDF`
        const datePlongeePDF = new Date(plongee.date);
        const now = new Date();
        datePlongeePDF.setHours(now.getHours(), now.getMinutes(), now.getSeconds());

        
        // üîπ Cr√©ation du document PDF
        const doc = new PDFDocument({ margin: 40 });
                const formattedDate = datePlongeePDF.toLocaleString("fr-FR", {
            year: "2-digit",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit"
        }).replace(/\D/g, "-"); // Remplace les s√©parateurs par des tirets
        const fileName = `parametres_plongee_${formattedDate}.pdf`; 
        const filePath = path.join(__dirname, "public", "pdf", fileName);

       // const filePath = path.join(__dirname, "public", fileName); // ‚úÖ filePath d√©fini AVANT utilisation

        const stream = fs.createWriteStream(filePath); // ‚úÖ Maintenant, filePath est bien d√©fini


        console.log("üìÑ G√©n√©ration du PDF :", filePath); // Debug pour v√©rifier le chemin
        doc.pipe(stream);


        // Ajouter le logo (assure-toi que le chemin est correct)
        const logoPath = __dirname + "/public/images/scc28.jpeg"; 

        const logoWidth = 100;  // Largeur du logo
        const logoHeight = 40;  // Hauteur du logo
        const margin = 20;      // Marge entre le logo et le rectangle

        // Position du logo (en haut √† gauche)
        doc.image(logoPath, 50, 50, { width: logoWidth, height: logoHeight });

        // Position du rectangle (juste √† droite du logo)
        const rectX = 50 + logoWidth + margin; // D√©marre apr√®s le logo avec une marge
        const rectWidth = 500 - logoWidth - margin; // Largeur ajust√©e en fonction du logo
        const rectY = 50; // M√™me hauteur que le logo
        const rectHeight = 40; // Hauteur du rectangle (m√™me que le logo pour alignement)

        // Dessiner le rectangle gris
        doc.rect(rectX, rectY, rectWidth, rectHeight).fill("blue");

        // Texte du titre
        const text = "FICHE DE SECURITE";

        // Centrage vertical (ajuster selon la hauteur du texte)
        const textY = rectY + (rectHeight / 3); 

        // Ajouter le texte bien centr√© dans le rectangle
        doc.fillColor("white")
        .fontSize(20) // Taille ajust√©e pour √©viter de d√©passer
        .text(text, rectX, textY, { align: "center", width: rectWidth }); // Centrage parfait

        
        

        // R√©initialiser la couleur du texte √† noir pour le reste du document
        doc.fillColor("black");  // Texte noir pour le reste du document

        // Continuer avec le reste du contenu (par exemple, l'affichage des informations)
        doc.moveDown(1);

        // D√©finir une position verticale fixe (par exemple, √† 150 pour les deux √©l√©ments)
        const yPosition = doc.y;

        // Plong√©e du : [date] √† gauche avec une taille de police plus petite
        doc.fontSize(12).text(`Date : ${data.date}`, 40, yPosition, { width: 250, align: "left" });

        // Nom du DP : [nomdp] √† droite avec une taille de police plus petite
        doc.fontSize(12).text(`Nom du DP : ${data.nomDP}`, 300, yPosition, { width: 250, align: "left" });

        // Apr√®s avoir √©crit ces deux √©l√©ments, on peut d√©placer vers le bas pour la prochaine ligne
        doc.moveDown(1);  // Passe √† la ligne suivante apr√®s avoir √©crit les deux textes

        // D√©finir une position verticale fixe (par exemple, √† 150 pour les deux √©l√©ments)
        const zPosition = doc.y;

        // Plong√©e du : [date] √† gauche avec une taille de police plus petite
        doc.fontSize(12).text(`Site de Plong√©e : ${data.site}`, 40, zPosition, { width: 250, align: "left" });

        // Nom du DP : [nomdp] √† droite avec une taille de police plus petite
        doc.fontSize(12).text(`Qualification du DP : ${data.qualificationDP}`, 300, zPosition, { width: 250, align: "left" });

        // Apr√®s avoir √©crit ces deux √©l√©ments, on peut d√©placer vers le bas pour la prochaine ligne
        doc.moveDown(1);  // Passe √† la ligne suivante apr√®s avoir √©crit les deux textes

        // S√©parateur
        doc.lineWidth(0.5).moveTo(40, doc.y).lineTo(600, doc.y).stroke();
        doc.moveDown(1);

        // üìå D√©finition du titre "Liste des palanqu√©es"
        const text2 = "Liste des palanqu√©es";

        // üìå Augmenter la taille de police et centrer pr√©cis√©ment
        doc.fontSize(14).text(text2, 0, doc.y, { width: doc.page.width, align: "center", underline: true });


        // Remettre la police √† 10 pour le reste du document
        doc.fontSize(10);

        // Passer √† la ligne suivante
        doc.moveDown(1);

        // S√©parateur
        doc.lineWidth(0.5).moveTo(40, doc.y).lineTo(600, doc.y).stroke();
        doc.moveDown(1.5);

        // üìå Position de l'en-t√™te suppl√©mentaire
        const headerY = doc.y - 14; // Ajustement de la hauteur pour meilleure lisibilit√©

        // üü¢ "Consigne maxi DP" (centr√© sur les colonnes Prof. Max et Dur√©e Max)
        doc.fontSize(10).text("Consigne maxi DP", 270, headerY, { width: 100, align: "center" });

        // üü¢ "R√©alis√©s" (centr√© sur les colonnes Prof. et Dur√©e)
        doc.text("R√©alis√©s", 360, headerY, { width: 100, align: "center" });

        // üîπ S√©parateur vertical bien align√© entre "Consigne maxi DP" et "R√©alis√©s"
        doc.moveTo(365, headerY - 4).lineTo(365, doc.y + 12).stroke();

        // Remettre la police √† 10 pour le reste du document
        doc.fontSize(10);

        // S√©parateur
        doc.lineWidth(0.5).moveTo(40, doc.y).lineTo(600, doc.y).stroke();


        // üîπ Ajout d'un espace avant les titres des colonnes
        doc.moveDown(1);

        // üìå Nouvelles largeurs des colonnes
        const columnWidths = [110, 140, 45, 45, 45, 45, 50, 60]; // üÜï R√©duction des colonnes "Prof." et "Dur√©e"

        // üìå Positionner correctement les en-t√™tes des colonnes
        const tableTop = doc.y;
        doc.text("Nom", 10, tableTop, { width: columnWidths[0], align: "center" });
        doc.text("Plongeurs", 125, tableTop, { width: columnWidths[1], align: "center" });
        doc.text("Prof.", 275, tableTop, { width: columnWidths[2], align: "center" });
        doc.text("Dur√©e", 320, tableTop, { width: columnWidths[3], align: "center" });
        doc.text("Prof.", 365, tableTop, { width: columnWidths[4], align: "center" });
        doc.text("Dur√©e", 410, tableTop, { width: columnWidths[5], align: "center" });
        doc.text("Paliers", 465, tableTop, { width: columnWidths[6], align: "center" });
        doc.text("Type plong√©e", 525, tableTop, { width: columnWidths[7], align: "center" });

        // üìå S√©parateur sous les titres
        doc.lineWidth(0.5).moveTo(40, doc.y).lineTo(600, doc.y).stroke();
        doc.moveDown(1);

        // üìå D√©finition des positions X des traits verticaux
        const columnLines = [120, 270, 320, 365, 410, 460, 520, 590]; // üÜï Ajustement des traits

        // üìå Boucle pour remplir le tableau des palanqu√©es
        data.palanquees.forEach((palanquee) => {
            let startY = doc.y; // Position initiale

            // üü¢ Colonne "Nom"
            doc.text(palanquee.nom || "-", 20, startY, { width: columnWidths[0], align: "center" });

            // üü¢ Colonne "Plongeurs" (avec les guides en premier)
                let plongeurY = startY;
                if (palanquee.plongeurs && palanquee.plongeurs.length > 0) {
                    // Trier les plongeurs: d'abord les guides (GP, E2-E4), puis les autres
                    const plongeursTries = [...palanquee.plongeurs].sort((a, b) => {
                        const isGuideA = ['GP', 'E2', 'E3', 'E4'].includes(a.niveau);
                        const isGuideB = ['GP', 'E2', 'E3', 'E4'].includes(b.niveau);
                        
                        if (isGuideA && !isGuideB) return -1; // a (guide) avant b
                        if (!isGuideA && isGuideB) return 1;  // b (guide) avant a
                        return 0; // ordre √©gal
                    });

                    plongeursTries.forEach(plongeur => {
                        // Ajoute un symbole (‚òÖ) si c'est un guide
                        const isGuide = ['GP', 'E2', 'E3', 'E4'].includes(plongeur.niveau);
                        const prefix = isGuide ? '* ' : '';
                        doc.text(`${prefix}${plongeur.nom || "-"} (${plongeur.niveau || "-"})`, 
                                130, plongeurY, 
                                { width: columnWidths[1], align: "left" });
                        plongeurY += 14;
                    });
                } else {
                    doc.text("Aucun plongeur", 130, plongeurY, { width: columnWidths[1], align: "left" });
                    plongeurY += 14;
                }

            // üìå Ajustement de la hauteur de fin pour √©viter les chevauchements
            let endY = Math.max(startY + 20, plongeurY);

            // üü¢ Colonnes suivantes (avec alignement centr√©)
            doc.text((palanquee.prof_max ?? "-").toString(), 270, startY, { width: columnWidths[2], align: "center" });
            doc.text((palanquee.duree_max ?? "-").toString(), 320, startY, { width: columnWidths[3], align: "center" });
            doc.text((palanquee.profondeur ?? "-").toString(), 365, startY, { width: columnWidths[4], align: "center" });
            doc.text((palanquee.duree ?? "-").toString(), 410, startY, { width: columnWidths[5], align: "center" });
            doc.text(palanquee.paliers || "Aucun", 465, startY, { width: columnWidths[6], align: "center" });
            doc.text(palanquee.type || "-", 520, startY, { width: columnWidths[7], align: "center" });

            // üîπ Ajuster `doc.y` pour la prochaine palanqu√©e
            doc.y = endY;

            // üîπ Ligne de s√©paration sous chaque palanqu√©e
            doc.lineWidth(0.5).moveTo(40, doc.y).lineTo(600, doc.y).stroke();
            doc.moveDown(1);
        });

        // üìå Dessiner les traits verticaux apr√®s avoir affich√© toutes les palanqu√©es
        columnLines.forEach(x => {
            doc.moveTo(x, tableTop).lineTo(x, doc.y).stroke();
        });




         

        doc.end();

        //const datePlongeePDF = new Date(plongee.date); // Date de la plong√©e (sans heure)
        //const now = new Date(); // Heure actuelle
        //doc.pipe(stream);



        // Ajouter l'heure actuelle √† la date de la plong√©e
        datePlongeePDF.setHours(now.getHours(), now.getMinutes(), now.getSeconds());





        // üîπ Fin de la g√©n√©ration et envoi de la r√©ponse
        stream.on("finish", () => {
            res.json({ url: `/pdf/${fileName}` });
        });


    } catch (error) {
        console.error("‚ùå Erreur lors de la g√©n√©ration du PDF :", error);
        console.error(error.stack); // Affiche l'erreur compl√®te
        res.status(500).json({ error: "Erreur serveur lors de la g√©n√©ration du PDF." });
    }
});











// Gestion des plongeurs
app.get("/gestion-plongeurs", async (req, res) => {
    try {
        const { data, error } = await supabase.from("plongeurs").select("*");

        if (error) {
            console.error("Erreur lors de la r√©cup√©ration des plongeurs:", error);
            return res.status(500).send("Erreur serveur");
        }

        // Trier les plongeurs par ordre alphab√©tique sur le nom
        data.sort((a, b) => a.nom.localeCompare(b.nom));

        // Passer la liste tri√©e ET le nombre de plongeurs √† la vue
        res.render("gestion_plongeurs", { 
            plongeurs: data,
            nombrePlongeurs: data.length // Ajout du comptage
        });
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des plongeurs:", error);
        res.status(500).send("Erreur serveur");
    }
});

// Route pour r√©cup√©rer les plongeurs ayant un niveau E3 ou E4 pour une sortie sp√©cifique
app.get("/api/get-plongeurs", async (req, res) => {
    const { sortieId, categorie } = req.query; // R√©cup√®re l'ID de la sortie et le niveau (categorie) depuis les param√®tres de la requ√™te

    // Validation du niveau, il doit √™tre "E3" ou "E4"
    if (categorie && !["E3", "E4"].includes(categorie)) {
        return res.status(400).json({ error: "Le niveau doit √™tre E3 ou E4." });
    }

    try {
        // R√©cup√©rer les plongeurs associ√©s √† la sortie via plongeurs_sorties
        let query = supabase
            .from("plongeurs_sorties")
            .select("plongeur_id")  // S√©lectionner uniquement les plongeur_id (avec le "s" enlev√©)
            .eq("sortie_id", sortieId);  // Filtrer par sortie_id

        // Si une cat√©gorie (niveau) est fournie, filtrer les plongeurs par niveau
        let plongeursIdsQuery;
        if (categorie) {
            plongeursIdsQuery = await supabase
                .from("plongeurs")
                .select("id")
                .eq("niveau", categorie);  // Filtrer les plongeurs par niveau
        }

        // Si une cat√©gorie a √©t√© sp√©cifi√©e, on r√©cup√®re les ids des plongeurs correspondant √† cette cat√©gorie
        let plongeursIds = [];
        if (plongeursIdsQuery && plongeursIdsQuery.data) {
            plongeursIds = plongeursIdsQuery.data.map(plongeur => plongeur.id);
        }

        // Si des plongeurs de la cat√©gorie sont trouv√©s, ajouter ce filtre
        if (plongeursIds.length > 0) {
            query = query.in("plongeur_id", plongeursIds);  // Utilise "plongeur_id" qui est la colonne correcte
        }

        const { data: plongeursSorties, error: plong√©esError } = await query;

        if (plong√©esError) {
            console.error("Erreur lors de la r√©cup√©ration des plongeurs associ√©s √† la sortie:", plong√©esError);
            return res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des plongeurs associ√©s." });
        }

        if (!plongeursSorties || plongeursSorties.length === 0) {
            return res.status(404).json({ error: "Aucun plongeur associ√© √† cette sortie." });
        }

        // Extraire les plongeur_ids uniquement une seule fois
        const idsPlongeurs = plongeursSorties.map(ps => ps.plongeur_id);

        // R√©cup√©rer les d√©tails des plongeurs √† partir de leurs ids
        const { data: plongeurs, error: plongeursError } = await supabase
            .from("plongeurs")
            .select("id, nom, niveau")
            .in("id", idsPlongeurs); // Filtrer par les ids des plongeurs

        if (plongeursError) {
            console.error("Erreur lors de la r√©cup√©ration des plongeurs:", plongeursError);
            return res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des plongeurs." });
        }

        // Si tout va bien, on renvoie les plongeurs
        res.json(plongeurs);
    } catch (error) {
        console.error("Erreur serveur:", error);
        res.status(500).json({ error: "Erreur serveur." });
    }
});

app.post('/api/update-dp', async (req, res) => {
    const { plongeeId, nomDP } = req.body;

    try {
        // Utilisation de Supabase pour mettre √† jour l'entr√©e
        const { data, error } = await supabase
            .from('plongees')  // Table 'plongees'
            .update({ nomdp: nomDP })  // Mettre √† jour la colonne 'nomdp' (tout en minuscules)
            .eq('id', plongeeId);  // Condition o√π l'id correspond √† plongeeId

        if (error) {
            throw error;  // Si une erreur survient
        }

        res.status(200).json({ message: "Plong√©e mise √† jour avec succ√®s.", data });
    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour :", error);
        res.status(500).json({ error: "Erreur lors de la mise √† jour du DP." });
    }
});


app.get('/api/plongeur/:id', async (req, res) => {
    const { id } = req.params;

    try {
        const { data, error } = await supabase
            .from('plongeurs')
            .select('nom, niveau') // ‚úÖ On r√©cup√®re aussi le niveau
            .eq('id', id)
            .single();

        if (error) throw error;

        res.status(200).json(data);  // Retourner nom + niveau
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration du plongeur :", error);
        res.status(500).json({ error: "Erreur lors de la r√©cup√©ration du plongeur" });
    }
});





app.post("/ajouter-plongeur", async (req, res) => {
    const { nom, niveau } = req.body;
    const { error } = await supabase
        .from("plongeurs")
        .insert([{ nom, niveau, sortie_en_cours: false }]);
    if (error) {
        console.error(error);
        return res.status(500).send("Erreur lors de l'ajout du plongeur");
    }
    res.redirect("/gestion-plongeurs");
});

app.post("/modifier-plongeur/:id", async (req, res) => {
    const { id } = req.params;
    const { niveau } = req.body;
    const { error } = await supabase
        .from("plongeurs")
        .update({ niveau })
        .eq("id", id);
    if (error) {
        console.error("Erreur de modification :", error);
        return res.status(500).send("Erreur lors de la modification");
    }
    res.send("Plongeur modifi√©");
});

app.delete("/supprimer-plongeur/:id", async (req, res) => {
    const { id } = req.params;
    const { error } = await supabase.from("plongeurs").delete().eq("id", id);
    if (error) {
        console.error("Erreur de suppression :", error);
        return res.status(500).send("Erreur lors de la suppression");
    }
    res.send("Plongeur supprim√©");
});

app.delete("/retirer-plongeur-de-palanquee/:palanqueeId/:plongeurId", async (req, res) => {
    const { palanqueeId, plongeurId } = req.params;

    console.log(`üõ†Ô∏è Requ√™te re√ßue pour retirer le plongeur ${plongeurId} de la palanqu√©e ${palanqueeId}`);

    const { error } = await supabase
        .from("palanquees_plongeurs")  // V√©rifie bien le nom exact de la table
        .delete()
        .match({ palanquee_id: palanqueeId, plongeur_id: plongeurId });

    if (error) {
        console.error("‚ùå Erreur suppression :", error);
        return res.status(500).send("Erreur lors du retrait du plongeur de la palanqu√©e");
    }

    console.log("‚úÖ Plongeur retir√© avec succ√®s !");
    res.send("Plongeur retir√© de la palanqu√©e");
});




// Gestion des sorties
app.get("/gestion-sorties", async (req, res) => {
    try {
        // R√©cup√©rer les sorties avec les plongeurs associ√©s
        const { data: sorties, error: errorSorties } = await supabase.from(
            "sorties",
        ).select(`
                id, 
                lieu, 
                date_debut, 
                date_fin, 
                plongeurs_sorties (plongeur_id)
            `);

        if (errorSorties) throw errorSorties;

        // R√©cup√©rer tous les plongeurs
        const { data: plongeurs, error: errorPlongeurs } = await supabase
            .from("plongeurs")
            .select("*");

        if (errorPlongeurs) throw errorPlongeurs;

        // Transformer les sorties pour inclure la liste des plongeurs associ√©s
        const sortiesAvecPlongeurs = sorties.map((sortie) => ({
            ...sortie,
            plongeurs_count: sortie.plongeurs_sorties
                ? sortie.plongeurs_sorties.length
                : 0,
            plongeurs_associes: sortie.plongeurs_sorties
                ? sortie.plongeurs_sorties.map((ps) => ps.plongeur_id)
                : [],
        }));

        res.render("gestion_sorties", {
            sorties: sortiesAvecPlongeurs,
            plongeurs,
        });
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des donn√©es:", error);
        res.status(500).send("Erreur serveur");
    }
});

// Route pour la page de s√©lection des sorties
app.get("/selection-sorties", async (req, res) => {
    try {
        // R√©cup√©rer les sorties disponibles
        const { data: sorties, error: sortiesError } = await supabase
            .from("sorties")
            .select("id, lieu, date_debut, date_fin"); // S√©lectionner les colonnes que vous souhaitez afficher

        if (sortiesError) throw sortiesError;

        // R√©cup√©rer les dates de plong√©es
        const { data: plongees, error: plongeesError } = await supabase
            .from("plongees")
            .select("date");

        if (plongeesError) throw plongeesError;

        // Loguer les donn√©es r√©cup√©r√©es pour d√©bogage
        //console.log("Sorties r√©cup√©r√©es :", sorties);
        //console.log("Plong√©es r√©cup√©r√©es :", plongees);

        // Rendre la vue de s√©lection des sorties avec les donn√©es r√©cup√©r√©es
        res.render("selection_sorties", { sorties, plongees });
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des sorties ou des plong√©es :", error);
        res.status(500).send("Erreur serveur");
    }
});

app.get("/get-plongeurs-sortie/:id", async (req, res) => {
    try {
        const sortieId = req.params.id;

        // Requ√™te pour r√©cup√©rer les plongeurs associ√©s √† la sortie
        const { data: plongeursAssocies, error } = await supabase
            .from("plongeurs_sorties")  // Utilise le bon nom de la table
            .select("plongeur_id")
            .eq("sortie_id", sortieId);

        if (error) throw error;

        // Extraire uniquement les IDs des plongeurs
        const plongeursIds = plongeursAssocies.map(p => p.plongeur_id);

        res.json({ plongeurs_associes: plongeursIds });
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des plongeurs associ√©s :", error);
        res.status(500).json({ error: "Erreur serveur" });
    }
});




// G√©rer la route pour la gestion des palanqu√©es avec la sortie s√©lectionn√©e
app.get("/gestion-palanquees", async (req, res) => {
    const sortieId = req.query.sortie; // R√©cup√©rer l'ID de la sortie s√©lectionn√©e
    const date = req.query.date; // R√©cup√©rer la date s√©lectionn√©e

    // V√©rifiez que les variables sont pr√©sentes
    if (!sortieId || !date) {
        return res.status(400).send("Sortie ou date manquante.");
    }

    try {
        // R√©cup√©rer les plong√©es associ√©es √† la sortie et √† la date
        const { data: plongees, error: plongeesError } = await supabase
            .from("plongees")
            .select("*")
            .eq("sortie_id", sortieId)
            .eq("date", date);

        if (plongeesError) throw plongeesError;

        // R√©cup√©rer les palanqu√©es associ√©es √† chaque plong√©e
        const palanqueesPromises = plongees.map(plongee =>
            supabase
                .from("palanquees")
                .select("*")
                .eq("plongee_id", plongee.id) // Assurez-vous que "id" est le bon champ
        );

        // Ex√©cutez toutes les promesses et attendez les r√©sultats
        const palanqueesResults = await Promise.all(palanqueesPromises);
        
        // Aplatir le tableau des r√©sultats pour avoir une liste de palanqu√©es
        const palanquees = palanqueesResults.flatMap(result => result.data || []);

        // Rendre la vue de gestion des palanqu√©es avec les plong√©es et palanqu√©es r√©cup√©r√©es
        res.render("gestion_palanquees", { plongees, palanquees, sortieId, date });
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des plong√©es ou palanqu√©es :", error);
        res.status(500).send("Erreur serveur");
    }
});






app.post("/ajouter-sortie", async (req, res) => {
    const { lieu, date_debut, date_fin } = req.body; // Ajout de date_fin

    const { error } = await supabase
        .from("sorties")
        .insert([{ lieu, date_debut, date_fin }]); // Ajout de date_fin

    if (error) {
        console.error("Erreur d'ajout de sortie :", error);
        return res.status(500).send("Erreur lors de l'ajout de la sortie");
    }
    res.redirect("/gestion-sorties");
});

app.delete("/supprimer-sortie/:id", async (req, res) => {
    const { id } = req.params;
    const { error } = await supabase.from("sorties").delete().eq("id", id);
    if (error) {
        console.error("Erreur de suppression de sortie :", error);
        return res.status(500).send("Erreur lors de la suppression");
    }
    res.send("Sortie supprim√©e");
});

app.post("/ajouter-plongeurs-a-sortie", async (req, res) => {
    //console.log("Donn√©es re√ßues :", req.body);
    let { sortie_id, plongeurs } = req.body;

    if (!sortie_id || !plongeurs) {
        return res.status(400).send("Sortie ou plongeurs non s√©lectionn√©s.");
    }

    try {
        // S'assurer que plongeurs est un tableau
        if (!Array.isArray(plongeurs)) {
            plongeurs = [plongeurs];
        }

        // Valider que tous les plongeurs sont des UUID valides
        const plongeursIds = plongeurs.filter(
            (id) => typeof id === "string" && id.length === 36,
        );

        if (plongeursIds.length === 0) {
            return res.redirect("/gestion-sorties"); // Aucun plongeur valide √† ajouter
        }

        // R√©cup√©rer les plongeurs d√©j√† associ√©s √† cette sortie
        const { data: plongeursExistants, error: errorPlongeursExistants } =
            await supabase
                .from("plongeurs_sorties")
                .select("plongeur_id")
                .eq("sortie_id", sortie_id);

        if (errorPlongeursExistants) throw errorPlongeursExistants;

        // Extraire les IDs des plongeurs d√©j√† ajout√©s
        const plongeursDejaAjoutes = new Set(
            plongeursExistants.map((ps) => ps.plongeur_id),
        );

        // Filtrer pour ne garder que les nouveaux plongeurs qui ne sont pas d√©j√† ajout√©s
        const nouveauxPlongeurs = plongeursIds.filter(
            (id) => !plongeursDejaAjoutes.has(id),
        );

        if (nouveauxPlongeurs.length === 0) {
            return res.redirect("/gestion-sorties"); // Rien √† ajouter
        }

        // Pr√©parer les nouvelles entr√©es
        const newEntries = nouveauxPlongeurs.map((plongeur_id) => ({
            sortie_id: sortie_id, // doit √™tre une cha√Æne UUID
            plongeur_id: plongeur_id, // doit √™tre une cha√Æne UUID
        }));

        //console.log("Nouvelle entr√©e √† ins√©rer :", newEntries); // Affiche les nouvelles entr√©es

        // Ins√©rer uniquement les nouveaux plongeurs
        const { error } = await supabase
            .from("plongeurs_sorties")
            .insert(newEntries);

        if (error) {
            console.error(
                "Erreur lors de l'ajout des plongeurs :",
                error.message,
            );
            return res
                .status(500)
                .send(
                    "Erreur lors de l'ajout des plongeurs : " + error.message,
                );
        }

        //console.log("Plongeurs ajout√©s :", newEntries); // Log des plongeurs ajout√©s
        res.redirect("/gestion-sorties");
    } catch (error) {
        console.error("Erreur lors de l'ajout des plongeurs :", error);
        res.status(500).send("Erreur interne du serveur.");
    }
});

app.get("/plongees/:sortieId/:date", async (req, res) => {
    const { sortieId, date } = req.params; // Vous avez d√©j√† fait cela
    try {
        // R√©cup√©rer les plong√©es pour la date et la sortie s√©lectionn√©es
        const { data: plongees, error } = await supabase
            .from("plongees")
            .select("*")
            .eq("date", date)
            .eq("sortie_id", sortieId);

        if (error) throw error;

        // Rendre la vue avec les plong√©es r√©cup√©r√©es
        res.render("gestion_plongees", { plongees, date, sortieId }); // Assurez-vous que date est pass√©e ici
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des plong√©es :", error);
        res.status(500).send("Erreur serveur");
    }
});
app.get("/api/plongees/:sortieId/:date", async (req, res) => {
    const { sortieId, date } = req.params;
    try {
        // R√©cup√©rer les plong√©es pour la date et la sortie s√©lectionn√©es
        const { data: plongees, error } = await supabase
            .from("plongees")
            .select("*")
            .eq("date", date)
            .eq("sortie_id", sortieId);

        if (error) throw error;

        //console.log("‚úÖ Plong√©es envoy√©es en JSON :", plongees); // üî• Debug
        res.json(plongees); // ‚úÖ On envoie un JSON
    } catch (error) {
        console.error("‚ùå Erreur serveur :", error);
        res.status(500).json({ error: "Erreur serveur" });
    }
});


app.post("/api/ajouter-plongee", async (req, res) => {
    try {
        const { sortie_id, date } = req.body;

        if (!sortie_id || !date) {
            return res.status(400).json({ error: "Donn√©es manquantes pour cr√©er la plong√©e" });
        }

        // üîç R√©cup√©rer le nombre actuel de plong√©es pour cette sortie
        const { data: existingPlongees, error: countError } = await supabase
            .from("plongees")
            .select("id", { count: "exact" }) // On compte le nombre de plong√©es
            .eq("sortie_id", sortie_id);

        if (countError) {
            console.error("Erreur lors de la r√©cup√©ration des plong√©es :", countError);
            return res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des plong√©es" });
        }

        const numero = (existingPlongees.length || 0) + 1; // Num√©ro = total existant + 1

        // üîΩ Ins√©rer la nouvelle plong√©e avec le bon num√©ro
        const plongeeData = { numero, sortie_id, date };

        // Si nomdp n'est pas fourni, on le met explicitement √† null (pas "null" en cha√Æne, mais un v√©ritable null)
        plongeeData.nomdp = null;

        // Ins√©rer la plong√©e dans la table 'plongees'
        const { data, error } = await supabase
            .from("plongees")
            .insert([plongeeData])
            .select("*");

        if (error) {
            console.error("Erreur lors de l'insertion :", error);
            return res.status(500).json({ error: "Erreur lors de l'insertion" });
        }

        return res.json(data[0]); // Renvoi la plong√©e ajout√©e
    } catch (error) {
        console.error("üö® Erreur serveur :", error);
        return res.status(500).json({ error: "Erreur serveur lors de l'ajout de la plong√©e" });
    }
});

app.get("/api/get-dp-name", async (req, res) => {
    const { plongeeId } = req.query;  // R√©cup√®re l'ID de la plong√©e depuis les param√®tres de la requ√™te

    if (!plongeeId) {
        return res.status(400).json({ error: "Le param√®tre plongeeId est requis." });
    }

    try {
        // Requ√™te pour r√©cup√©rer le nom du DP pour une plong√©e donn√©e
        const { data, error } = await supabase
            .from("plongees")
            .select("nomdp")
            .eq("id", plongeeId)
            .single();  // R√©cup√©rer un seul enregistrement

        if (error) {
            console.error("Erreur lors de la r√©cup√©ration du nom du DP:", error);
            return res.status(500).json({ error: "Erreur lors de la r√©cup√©ration du nom du DP." });
        }

        // Si les donn√©es sont trouv√©es, on renvoie le nom du DP
        if (data && data.nomdp) {
            res.json({ nomdp: data.nomdp });
        } else {
            res.status(404).json({ error: "Nom du DP non trouv√© pour cette plong√©e." });
        }
    } catch (error) {
        console.error("Erreur serveur:", error);
        res.status(500).json({ error: "Erreur serveur." });
    }
});


app.post("/api/mettre-a-jour-site", async (req, res) => {
try {
    const { id, site } = req.body;

    if (!id || !site) {
        return res.status(400).json({ error: "ID et site requis" });
    }

    // Mise √† jour dans Supabase
    const { data, error } = await supabase
        .from("plongees") // Remplace par le bon nom de la table
        .update({ site: site }) // V√©rifie que la colonne "site" existe bien
        .eq("id", id);

    if (error) {
        throw error;
    }

    console.log(`‚úÖ Plong√©e ${id} mise √† jour avec le site: ${site}`);
    res.json({ success: true, data });
} catch (error) {
    console.error("‚ùå Erreur mise √† jour site:", error);
    res.status(500).json({
        error: "Erreur serveur lors de la mise √† jour du site",
    });
}
});

app.post("/api/update-site", async (req, res) => {
const { plongeeId, site } = req.body;

try {
    const { data, error } = await supabase
        .from("plongees")
        .update({ site: site })
        .eq("id", plongeeId);

    if (error) {
        throw error;
    }

    //console.log("‚úÖ Mise √† jour r√©ussie !");
    res.status(200).json({ success: true, data });
} catch (err) {
    console.error("‚ùå Erreur mise √† jour site:", err);
    res.status(500).json({ error: err.message });
}
});

app.get("/gestion_palanquees", async (req, res) => {
const plongeeId = req.query.id; // ID de la plong√©e

if (!plongeeId) {
    return res.status(400).send("ID de plong√©e manquant");
}

try {
    // 1. Trouver l'ID de la sortie associ√©e √† cette plong√©e
    const { data: plongee, error: plongeeError } = await supabase
        .from("plongees")
        .select("sortie_id")
        .eq("id", plongeeId)
        .single();

    if (plongeeError || !plongee) {
        return res.status(404).send("Plong√©e non trouv√©e.");
    }

    const sortieId = plongee.sortie_id;

    // 2. R√©cup√©rer les informations de la sortie (lieu)
    const { data: sortie, error: sortieError } = await supabase
        .from("sorties")
        .select("id, lieu")
        .eq("id", sortieId)
        .single();

    if (sortieError || !sortie) {
        return res.status(404).send("Sortie non trouv√©e.");
    }

    // 3. R√©cup√©rer les plongeurs de cette sortie
    const { data: plongeursSortie, error: plongeursError } = await supabase
        .from("plongeurs_sorties")
        .select("plongeur_id")
        .eq("sortie_id", sortieId);

    if (plongeursError) {
        return res
            .status(500)
            .send("Erreur lors de la r√©cup√©ration des plongeurs.");
    }

    if (!plongeursSortie.length) {
        return res
            .status(404)
            .send("Aucun plongeur trouv√© pour cette sortie.");
    }

    // 4. R√©cup√©rer les d√©tails des plongeurs
    const plongeurIds = plongeursSortie.map((p) => p.plongeur_id);

    const { data: plongeurs, error: detailsError } = await supabase
        .from("plongeurs")
        .select("id, nom, niveau")
        .in("id", plongeurIds);

    if (detailsError) {
        return res
            .status(500)
            .send(
                "Erreur lors de la r√©cup√©ration des d√©tails des plongeurs.",
            );
    }

    // 5. Envoyer les donn√©es √† la vue
    res.render("gestion_palanquees", { plongee: sortie, plongeurs });
} catch (error) {
    console.error("Erreur serveur:", error);
    res.status(500).send("Erreur interne du serveur.");
}
});

/*// Route pour r√©cup√©rer les palanqu√©es associ√©es √† une plong√©e
app.get("/get_palanquees", async (req, res) => {
const plongeeId = req.query.plongee_id; // ID de la plong√©e

if (!plongeeId) {
    return res.status(400).send("ID de plong√©e manquant");
}

try {
    // R√©cup√©rer les palanqu√©es associ√©es √† la plong√©e
    const { data: palanquees, error: palanqueesError } = await supabase
        .from("palanquees") // Remplace par le nom de ta table de palanqu√©es
        .select("id, nom, plongeurs") // Assure-toi que les colonnes correspondent
        .eq("plongee_id", plongeeId);

    if (palanqueesError) {
        return res.status(500).send("Erreur lors de la r√©cup√©ration des palanqu√©es.");
    }

    // Renvoie les palanqu√©es au client
    res.json(palanquees);
} catch (error) {
    console.error("Erreur serveur:", error);
    res.status(500).send("Erreur interne du serveur.");
}
});*/

app.get("/get_palanquees/:plongee_id", async (req, res) => {
    const { plongee_id } = req.params;

    try {

        // R√©cup√©rer les palanqu√©es pour la plong√©e donn√©e
        const { data: palanquees, error: palanqueesError } = await supabase
        .from("palanquees")
        .select(`
            id, nom, profondeur, duree, paliers,
            palanquees_plongeurs (plongeur_id, niveau_plongeur_historique, plongeurs (id, nom, niveau))
        `)
        .eq("plongee_id", plongee_id);

        if (palanqueesError) throw new Error(palanqueesError.message);

        // R√©cup√©rer l'ID de la sortie associ√©e √† la plong√©e
        const { data: plongee, error: plongeeError } = await supabase
            .from("plongees")
            .select("sortie_id")
            .eq("id", plongee_id)
            .single();

        if (plongeeError) throw new Error(plongeeError.message);

        const sortie_id = plongee.sortie_id;

        // R√©cup√©rer les plongeurs de cette sortie
        const { data: plongeursSorties, error: plongeursSortiesError } = await supabase
            .from("plongeurs_sorties")
            .select("plongeur_id")
            .eq("sortie_id", sortie_id);

        if (plongeursSortiesError) throw new Error(plongeursSortiesError.message);

        const plongeursIds = plongeursSorties.map(ps => ps.plongeur_id);

        let plongeurs = [];
        if (plongeursIds.length > 0) {
            const { data, error } = await supabase
                .from("plongeurs")
                .select("*")
                .in("id", plongeursIds);

            if (error) throw new Error(error.message);
            plongeurs = data;
        }

        let plongeursPalanquees = [];
        if (palanquees.length > 0) {
            const { data, error } = await supabase
                .from("palanquees_plongeurs")
                .select("plongeur_id")
                .in("palanquee_id", palanquees.map(p => p.id));

            if (error) throw new Error(error.message);
            plongeursPalanquees = data;
        }

        // Filtrer les plongeurs qui ne sont pas dans une palanqu√©e
        const plongeursInPalanquees = plongeursPalanquees.map(pp => pp.plongeur_id);
        const plongeursDisponibles = plongeurs.filter(plongeur => !plongeursInPalanquees.includes(plongeur.id));

        res.status(200).json({ palanquees, plongeurs: plongeursDisponibles });

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es :", error.message);
        res.status(500).json({ error: error.message });
    }
});

app.post("/enregistrer_palanquee", async (req, res) => {
    //console.log("On entre dans enregistrer_palanquee");
    const palanquees = req.body;
    //console.log("Donn√©es re√ßues :", JSON.stringify(palanquees, null, 2));

    if (!Array.isArray(palanquees) || palanquees.length === 0) {
        return res.status(400).json({ error: "Donn√©es invalides ou incompl√®tes" });
    }

    const erreurs = [];
    const plongee_id = palanquees[0]?.plongee_id;
    //console.log("ID re√ßu dans app.js : ", plongee_id);

    if (!plongee_id) {
        return res.status(400).json({ error: "Plong√©e ID manquant" });
    }
    

    try {
        // üîç Charger toutes les palanqu√©es existantes pour cette plong√©e
        const { data: existingPalanquees, error: fetchError } = await supabase
            .from("palanquees")
            .select("id, nom, profondeur, duree, paliers")
            .eq("plongee_id", plongee_id);

        if (fetchError) {
            console.error("Erreur lors de la r√©cup√©ration des palanqu√©es existantes : ", fetchError);
            return res.status(500).json({ error: "Erreur r√©cup√©ration des palanqu√©es existantes" });
        }

        const existingPalanqueesMap = new Map(existingPalanquees.map(p => [p.id, p]));
        //console.log("Palanqu√©es existantes pour cette plong√©e : ", existingPalanquees);

        // üîÑ Traiter les palanqu√©es re√ßues
        const updatedPalanquees = [];
        for (const palanqueeData of palanquees) {
            //console.log("Palanqu√©e re√ßue : ", palanqueeData);
            let { id, nom, profondeur, duree, paliers, plongeurs } = palanqueeData;
            //console.log("ID apr√®s palanqueeData", id);

            // V√©rification des donn√©es re√ßues pour chaque palanqu√©e
            if (!nom || !plongeurs || plongeurs.length === 0) {
                erreurs.push({ palanquee: nom, message: "Donn√©es invalides ou incompl√®tes" });
                continue;
            }

            if (id) {
                //console.log("ID re√ßu pour l'enregistrement : ", id);
                // üîç V√©rifier si l'ID existe bien en base
                if (existingPalanqueesMap.has(id)) {
                    //console.log("on identifie que l'id existe");
                    // ‚úÖ Mise √† jour de la palanqu√©e
                    const { error: updateError } = await supabase
                        .from("palanquees")
                        .update({ nom, profondeur, duree, paliers })
                        .eq("id", id);

                    if (updateError) {
                        erreurs.push({ palanquee: nom, message: updateError.message });
                        continue;
                    }
                    updatedPalanquees.push({ id, plongeurs });
                } else {
                    // ‚ùå L'ID envoy√© ne correspond √† rien ‚Üí Probl√®me, on ne fait rien
                    erreurs.push({ palanquee: nom, message: "ID invalide, palanqu√©e inexistante" });
                    continue;
                }
            } else {
                //console.log("On ne re√ßoit pas un id", id);
                // ‚úÖ Insertion d'une nouvelle palanqu√©e
                const { data: newPalanquee, error: insertError } = await supabase
                    .from("palanquees")
                    .insert([{ plongee_id, nom, profondeur, duree, paliers }])
                    .select()
                    .single();

                if (insertError) {
                    erreurs.push({ palanquee: nom, message: insertError.message });
                } else {
                    //console.log("Nouvelle palanqu√©e ins√©r√©e avec ID : ", newPalanquee.id);
                    updatedPalanquees.push({ id: newPalanquee.id, plongeurs });
                }
            }
        }

        // Mise √† jour des plongeurs pour les palanqu√©es
        for (const palanquee of updatedPalanquees) {
            const { id, plongeurs } = palanquee;
            // ‚úÖ Mise √† jour des plongeurs (√©vite les doublons)
            const { error: deleteError } = await supabase
                .from("palanquees_plongeurs")
                .delete()
                .eq("palanquee_id", id);
        
            if (deleteError) {
                erreurs.push({ palanquee: palanquee.nom, message: deleteError.message });
                continue;
            }
        
            if (plongeurs.length > 0) {
                const plongeursData = await Promise.all(plongeurs.map(async (plongeur_id) => {
                    // R√©cup√©rer les informations du plongeur (nom, niveau, et niveau historique)
                    const { data: plongeur, error: plongeurError } = await supabase
                        .from("plongeurs")
                        .select("nom, niveau")
                        .eq("id", plongeur_id)
                        .single();
        
                    if (plongeurError) {
                        erreurs.push({ plongeur: plongeur_id, message: plongeurError.message });
                        return null; // On saute ce plongeur si une erreur se produit
                    }
        
                    // Retourner les donn√©es pour l'insertion dans palanquees_plongeurs
                    return {
                        palanquee_id: id,
                        plongeur_id,
                        nom_plongeur: plongeur.nom,   // Ajouter le nom du plongeur
                        niveau_plongeur: plongeur.niveau, // Ajouter le niveau actuel du plongeur
                        niveau_plongeur_historique: plongeur.niveau // Conserver l'historique du niveau
                    };
                }));
        
                // Filtrer les valeurs nulles si une erreur s'est produite
                const plongeursDataValid = plongeursData.filter(data => data !== null);
        
                // Ins√©rer les plongeurs dans la table palanquees_plongeurs
                const { error: plongeursError } = await supabase
                    .from("palanquees_plongeurs")
                    .insert(plongeursDataValid);
        
                if (plongeursError) {
                    erreurs.push({ palanquee: palanquee.nom, message: plongeursError.message });
                }
            }
        }
        

        if (erreurs.length > 0) {
            console.log("Certaines palanqu√©es ont rencontr√© des erreurs : ", erreurs);
            return res.status(207).json({ message: "Certaines palanqu√©es ont rencontr√© des erreurs", erreurs });
        }

        res.status(201).json({ message: "Toutes les palanqu√©es ont √©t√© enregistr√©es avec succ√®s !" });
    } catch (error) {
        console.error("Erreur inattendue : ", error);
        res.status(500).json({ error: error.message });
    }
});








app.delete("/supprimer_palanquee/:id", async (req, res) => {
    const { id } = req.params;

    if (!id) {
        return res.status(400).json({ error: "ID de palanqu√©e manquant" });
    }

    try {
        // Supprimer d'abord les relations dans `palanquees_plongeurs`
        await supabase.from("palanquees_plongeurs").delete().eq("palanquee_id", id);

        // Ensuite, supprimer la palanqu√©e elle-m√™me
        const { error } = await supabase.from("palanquees").delete().eq("id", id);

        if (error) {
            return res.status(500).json({ error: error.message });
        }

        res.status(200).json({ message: "Palanqu√©e supprim√©e avec succ√®s" });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});


// R√©cup√©rer les palanqu√©es avec leurs plongeurs
app.get("/palanquees", async (req, res) => {
try {
    let { data: palanquees, error } = await supabase
        .from("palanquees")
        .select("*");

    if (error) throw error;

    for (let palanquee of palanquees) {
        let { data: palanqueesPlongeurs } = await supabase
            .from("palanquees_plongeurs")
            .select("plongeur_id")
            .eq("palanquee_id", palanquee.id);

        let plongeurIds = palanqueesPlongeurs.map(p => p.plongeur_id);

        let { data: plongeurs } = await supabase
            .from("plongeurs")
            .select("*")
            .in("id", plongeurIds);

        palanquee.plongeurs = plongeurs;
    }

    res.render("palanquees", { palanquees });
} catch (error) {
    console.error("Erreur:", error);
    res.status(500).send("Erreur serveur");
}
});

// R√©cup√©rer les param√®tres des palanqu√©es
app.get("/parametres_palanquees", async (req, res) => {
    //console.log("üì¢ Route /parametres_palanquees appel√©e avec query:", req.query);

    const plongeeId = req.query.id;

    if (!plongeeId) {
        console.error("‚ùå Erreur: Aucun ID de plong√©e fourni dans l'URL.");
        return res.status(400).send("ID de plong√©e manquant.");
    }

    try {
        let { data: palanquees, error: errorPalanquees } = await supabase
            .from("palanquees")
            .select("*")
            .eq("plongee_id", plongeeId); // On filtre par plongeeId

        if (errorPalanquees) throw errorPalanquees;

        if (!palanquees || palanquees.length === 0) {
            console.log("‚ö†Ô∏è Aucune palanqu√©e trouv√©e pour cette plong√©e !");
            return res.render("parametres_palanquees", { palanquees: [] });
        }

        for (let palanquee of palanquees) {
            if (!palanquee.id || typeof palanquee.id !== "string") {
                console.error(`‚ùå Erreur: palanquee.id est invalide (${palanquee.id})`);
                continue;
            }

            //console.log(`üîé ID de la palanqu√©e r√©cup√©r√©e: ${palanquee.id}`);

            let { data: palanqueesPlongeurs, error: errorLien } = await supabase
                .from("palanquees_plongeurs")
                .select("plongeur_id, niveau_plongeur_historique")
                .eq("palanquee_id", palanquee.id);

            if (errorLien) {
                console.error(`‚ùå Erreur r√©cup√©ration plongeurs pour ${palanquee.id}:`, errorLien);
                continue;
            }

            //console.log(`üìù Liens palanqu√©e-plongeurs:`, JSON.stringify(palanqueesPlongeurs, null, 2));

            const plongeurIds = palanqueesPlongeurs.map(p => p.plongeur_id);

            if (plongeurIds.length === 0) {
                console.log(`‚ö†Ô∏è Aucun plongeur trouv√© pour ${palanquee.id}`);
                palanquee.plongeurs = [];
                continue;
            }

            let { data: plongeurs, error: errorPlongeurs } = await supabase
                .from("plongeurs")
                .select("*")
                .in("id", plongeurIds);

            if (errorPlongeurs) {
                console.error(`‚ùå Erreur r√©cup√©ration d√©tails plongeurs pour ${palanquee.id}:`, errorPlongeurs);
                continue;
            }

            //console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Plongeurs trouv√©s pour ${palanquee.id}:`, JSON.stringify(plongeurs, null, 2));

            // Ajouter le niveau historique pour chaque plongeur
            palanquee.plongeurs = plongeurs.map(plongeur => {
                let palanqueesPlongeur = palanqueesPlongeurs.find(p => p.plongeur_id === plongeur.id);
                if (palanqueesPlongeur) {
                    plongeur.niveau_plongeur_historique = palanqueesPlongeur.niveau_plongeur_historique;
                }
                return plongeur;
            });
        }

        res.render("parametres_palanquees", { palanquees, plongeeId });
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des palanqu√©es:", error);
        res.status(500).send("Erreur serveur");
    }
});


app.post("/sauvegarder_parametres", async (req, res) => {
    //console.log("üì© Donn√©es re√ßues pour sauvegarde :", req.body);

    const { id, profondeur, duree, paliers, type } = req.body;

    if (!id || profondeur === undefined || duree === undefined || paliers === undefined || !type) {
        return res.status(400).json({ error: "Donn√©es invalides ou incompl√®tes." });
    }

    try {
        let { error } = await supabase
            .from("palanquees")
            .update({ profondeur, duree, paliers, type }) // üÜï Ajout de `type` ici
            .eq("id", id);

        if (error) {
            console.error(`‚ùå Erreur mise √† jour palanqu√©e ${id}:`, error);
            return res.status(500).json({ error: "Erreur serveur lors de la mise √† jour." });
        }

        //console.log(`‚úÖ Param√®tres de la palanqu√©e ${id} mis √† jour avec succ√®s.`);
        res.json({ success: true, message: "Param√®tres enregistr√©s avec succ√®s !" });
    } catch (error) {
        console.error("‚ùå Erreur serveur :", error);
        res.status(500).json({ error: "Erreur serveur." });
    }
});


app.get("/plongee_info", async (req, res) => {
    const plongeeId = req.query.id; // R√©cup√©ration de l'ID de plong√©e depuis la requ√™te

    if (!plongeeId) {
        return res.status(400).json({ error: "ID de plong√©e manquant." });
    }

    try {
        // R√©cup√©rer les donn√©es de la plong√©e
        let { data, error } = await supabase
            .from("plongees")
            .select("date, site, nomdp, heure_debut") // R√©cup√®re date, site et nomdp (ID du DP)
            .eq("id", plongeeId)
            .single();

        if (error) throw error;

        if (!data) {
            return res.status(404).json({ error: "Plong√©e non trouv√©e." });
        }

        // R√©cup√©rer les informations de la plong√©e
        const dateFormattee = new Date(data.date).toLocaleDateString("fr-FR", { day: "2-digit", month: "long", year: "numeric" });
        const nomSitePlongee = data.site || "Site inconnu";

        // Initialiser nomDuDP et niveauDP avec des valeurs par d√©faut
        let nomDuDP = "DP non trouv√©";
        let niveauDP = "Niveau non trouv√©";

        // Si un ID de DP existe, r√©cup√©rer le nom et le niveau du DP
        if (data.nomdp) {
            let { data: dpData, error: dpError } = await supabase
                .from("plongeurs")
                .select("nom, niveau") // R√©cup√®re le nom et le niveau du DP
                .eq("id", data.nomdp)
                .single(); // On prend un seul r√©sultat, car il doit √™tre unique

            if (dpError) {
                console.error("Erreur lors de la r√©cup√©ration du DP:", dpError);
            } else if (dpData) {
                nomDuDP = dpData.nom || "Nom du DP non trouv√©"; // Si un nom est trouv√©, on l'affiche
                niveauDP = dpData.niveau || "Niveau du DP non trouv√©"; // R√©cup√®re √©galement le niveau
            }
        }

        // Renvoyer les informations avec le nom et le niveau du DP
        res.json({
            date: dateFormattee,
            site: nomSitePlongee,
            nomdp: nomDuDP, // Inclure le nom du DP
            niveaudp: niveauDP, // Inclure le niveaux du DP
            heure_debut: data.heure_debut // Inclure l'heure de d√©but
        });
    } catch (err) {
        console.error("Erreur r√©cup√©ration plong√©e:", err);
        res.status(500).json({ error: "Erreur serveur." });
    }
});



app.get("/modif_palanquee/:id", async (req, res) => {
const palanqueeId = req.params.id;
console.log("Chargement de la palanqu√©e avec ID :", palanqueeId);

try {
    let { data: palanquee, error: palanqueeError } = await supabase
        .from("palanquees")
        .select("*")
        .eq("id", palanqueeId)
        .single();

    if (palanqueeError) {
        console.error("Erreur lors de la r√©cup√©ration de la palanqu√©e:", palanqueeError);
        throw palanqueeError;
    }

    console.log("Palanqu√©e trouv√©e :", palanquee);

    // R√©cup√©rer la liste des plongeurs
    let { data: plongeurs, error: plongeursError } = await supabase
        .from("palanquees_plongeurs")
        .select("plongeurs (id, nom, niveau)")
        .eq("palanquee_id", palanqueeId);

    if (plongeursError) {
        console.error("Erreur lors de la r√©cup√©ration des plongeurs:", plongeursError);
        throw plongeursError;
    }

    const plongeursListe = plongeurs.map(p => p.plongeurs);

    res.render("modif_palanquee", { palanquee, plongeurs: plongeursListe });
} catch (error) {
    console.error("Erreur lors du chargement de la palanqu√©e:", error);
    res.status(500).send("Erreur serveur.");
}
});


app.post('/supprimer_palanquee', async (req, res) => {
const { palanqueeId } = req.body;

// Supprimer les plongeurs associ√©s
await supabase
    .from('palanquees_plongeurs')
    .delete()
    .eq('palanquee_id', palanqueeId);

// Supprimer la palanqu√©e
const { error } = await supabase
    .from('palanquees')
    .delete()
    .eq('id', palanqueeId);

if (error) {
    return res.status(500).send("Erreur lors de la suppression de la palanqu√©e.");
}

res.send("Palanqu√©e et plongeurs supprim√©s avec succ√®s.");
});

app.post("/ajouter-plongee", async (req, res) => {
    try {
        const { sortie_id, date } = req.body; // Ajoute sortie_id

        if (!sortie_id || !date) {
            return res.status(400).json({ error: "sortie_id et date sont requis" });
        }

        const { data, error } = await supabase
            .from("plongees")
            .insert([{ sortie_id, date }]);

        if (error) {
            console.error("Erreur Supabase :", error);
            return res.status(500).json({ error: error.message });
        }

        res.status(201).json({ message: "Plong√©e ajout√©e", data });
    } catch (err) {
        console.error("Erreur serveur :", err);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

app.post('/retirer-plongeur', async (req, res) => {
    const { plongeurId, sortieId } = req.body;

    //console.log("Donn√©es re√ßues:", req.body);

    if (!plongeurId || !sortieId) {
        return res.status(400).json({ success: false, message: "Plongeur ou sortie manquant." });
    }

    try {
        // Utiliser Supabase pour supprimer l'association dans la table plongeurs_sorties
        const { error } = await supabase
            .from('plongeurs_sorties')
            .delete()
            .eq('plongeur_id', plongeurId)
            .eq('sortie_id', sortieId);

        if (error) {
            console.error("Erreur lors de la suppression de l'association dans la base de donn√©es :", error);
            return res.status(500).json({ success: false, message: "Erreur serveur" });
        }

        return res.json({ success: true });
    } catch (error) {
        console.error("Erreur lors de la suppression :", error);
        return res.status(500).json({ success: false, message: "Erreur serveur" });
    }
});

app.post("/api/set-dp", async (req, res) => {
    const { plongeeId, dpId } = req.body;

    if (!plongeeId || !dpId) {
        return res.status(400).json({ error: "Donn√©es manquantes" });
    }

    const { error } = await supabase
        .from("plongees")
        .update({ nomDP: dpId }) // Met √† jour le DP
        .eq("id", plongeeId);

    if (error) {
        console.error("Erreur mise √† jour DP :", error);
        return res.status(500).json({ error: "Erreur serveur" });
    }

    res.json({ success: true });
});

// Route pour g√©rer le webhook
app.post('/webhook', (req, res) => {
    console.log("Webhook re√ßu, corps de la requ√™te:", req.body); // Log pour debug

    if (!req.body || typeof req.body !== 'object') {
        return res.status(400).send("Erreur: Le corps de la requ√™te est invalide.");
    }

    if (req.body.ref === 'refs/heads/main') {
        console.log('Mise √† jour de la branche principale d√©tect√©e.');

        const exec = require('child_process').exec;
        exec('/home/ludo/app/palanquee-app/deploy.sh', (error, stdout, stderr) => {
            if (error) {
                console.error(`Erreur d'ex√©cution: ${stderr}`);
                return res.status(500).send("Erreur lors du d√©ploiement.");
            }
            console.log(stdout);
            res.send("D√©ploiement r√©ussi !");
        });
    } else {
        res.status(200).send("Aucun d√©ploiement n√©cessaire.");
    }
});

app.delete("/delete-plongee/:id", async (req, res) => {
    const plongeeId = req.params.id;

    if (!plongeeId) {
        return res.status(400).json({ error: "ID de plong√©e manquant" });
    }

    try {
        const { error } = await supabase
            .from("plongees") // Remplace par le nom exact de ta table
            .delete()
            .eq("id", plongeeId);

        if (error) {
            return res.status(500).json({ error: error.message });
        }

        res.status(200).json({ success: true, message: "Plong√©e supprim√©e avec succ√®s" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/enregistrer-consignes', async (req, res) => {
    const { palanquee_id, prof_max, duree_max } = req.body;

    if (!palanquee_id || !prof_max || !duree_max) {
        return res.status(400).json({ error: 'Tous les champs sont requis' });
    }

    // 3Ô∏è‚É£ Mettre √† jour Supabase
    const { error } = await supabase
        .from('palanquees')
        .update({ prof_max, duree_max })
        .eq('id', palanquee_id);

    if (error) {
        console.error("Erreur Supabase :", error);
        return res.status(500).json({ error: "Erreur lors de la mise √† jour" });
    }

    res.json({ success: true, message: "Consignes enregistr√©es avec succ√®s !" });
});

// üöÄ Route API pour envoyer un email avec le PDF
app.post("/send-email", async (req, res) => {
    const { email, pdfUrl } = req.body;

    if (!email || !pdfUrl) {
        return res.status(400).json({ error: "Email et PDF requis" });
    }

    let transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
            user: "ludosams@gmail.com",
            pass: "vjqy kriu sgcu qtlz" // ‚ö†Ô∏è Utilise un mot de passe d‚Äôapplication s√©curis√©
        }
    });

    let mailOptions = {
        from: '"Club de Plong√©e" <tonemail@gmail.com>',
        to: email,
        subject: "üìÑ Compte-rendu de plong√©e",
        text: "Bonjour,\n\nVoici le compte-rendu de votre plong√©e en pi√®ce jointe.\n\nCordialement,\nL'√©quipe de plong√©e.",
        attachments: [
            {
                filename: "Compte-rendu-Plong√©e.pdf",
                path: pdfUrl // Utilise l'URL compl√®te du PDF
            }
        ]
    };

    try {
        let info = await transporter.sendMail(mailOptions);
        console.log("üìß Email envoy√© :", info.response);
        res.json({ success: true, message: "Email envoy√© avec succ√®s !" });
    } catch (error) {
        console.error("‚ùå Erreur lors de l'envoi de l'email :", error);
        res.status(500).json({ error: "Erreur lors de l'envoi de l'email" });
    }
});

app.post("/api/lancer-plongee", async (req, res) => {
    const { plongeeId, startTime } = req.body; // R√©cup√©rez startTime depuis le corps de la requ√™te

    if (!plongeeId) {
        return res.status(400).json({ error: "ID de plong√©e manquant" });
    }

    try {
        // Utilisez startTime envoy√© par le client ou g√©n√©rez-le ici
        const heureSQL = new Date().toLocaleTimeString("fr-FR", { hour12: false }); // "HH:MM:SS"

        const { data, error } = await supabase
            .from("plongees")
            .update({ heure_debut: heureSQL }) // Utilisez l'heure au format "HH:MM:SS"
            .eq("id", plongeeId);

        if (error) {
            throw error;
        }

        res.json({ success: true, message: "Plong√©e lanc√©e avec succ√®s", data });
    } catch (error) {
        console.error("Erreur lors de la mise √† jour de l'heure de d√©but :", error);
        res.status(500).json({ error: "Erreur serveur" });
    }
});

// Ajoutez cette nouvelle route dans votre fichier de routes (server.js ou app.js)
app.get('/api/stats', async (req, res) => {
    try {
        // R√©cup√©ration du nombre r√©el de plongeurs
        const { count: plongeursCount } = await supabase
            .from('plongeurs')
            .select('*', { count: 'exact', head: true });

        // R√©cup√©ration du nombre r√©el de sorties (adaptez selon votre table)
        const { count: sortiesCount } = await supabase
            .from('sorties')
            .select('*', { count: 'exact', head: true });

        // R√©cup√©ration du nombre r√©el de palanqu√©es (adaptez selon votre table)
        const { count: palanqueesCount } = await supabase
            .from('palanquees')
            .select('*', { count: 'exact', head: true });

        res.json({
            plongeurs: plongeursCount || 0,
            sorties: sortiesCount || 0,
            palanquees: palanqueesCount || 0
        });
    } catch (error) {
        console.error('Erreur stats:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});



// D√©marrer le serveur HTTPS
const server = https.createServer(options, app);

server.listen(port, host, () => {
    console.log(`Server is running on https://${host}:${port}`);
});